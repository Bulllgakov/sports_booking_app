#!/usr/bin/env node

/**
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –ø–∞–¥–µ–ª –∫–ª—É–±–æ–≤
 * –†–∞–∑–¥–µ–ª—è–µ—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –∫–ª—É–±–æ–≤
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–µ—Ç–µ–≤—ã–µ –∫–ª—É–±—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ñ–∏–ª–∏–∞–ª–∞–º–∏
 */

import WebsiteParser from './website-parser.js';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';
import axios from 'axios';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.join(__dirname, '.env') });

/**
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
 * —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –∫–ª—É–±–æ–≤
 */
class PadelClubData {
  constructor() {
    // –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ –ò–ù–ù)
    this.legalEntities = new Map(); // –ò–ù–ù -> LegalEntity
    
    // –§–∏–∑–∏—á–µ—Å–∫–∏–µ –∫–ª—É–±—ã
    this.clubs = [];
  }
  
  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞
   */
  addLegalEntity(inn, data) {
    if (!inn) return null;
    
    if (!this.legalEntities.has(inn)) {
      this.legalEntities.set(inn, {
        inn,
        ogrn: data.ogrn || '',
        legalName: data.legalName || '',
        legalAddress: data.legalAddress || '',
        kpp: data.kpp || '',
        okved: data.okved || '',
        managementName: data.managementName || '',
        managementPost: data.managementPost || '',
        foundedDate: data.foundedDate || null,
        capital: data.capital || null,
        phones: data.phones || [],
        emails: data.emails || [],
        website: data.website || '',
        clubs: [] // –°–ø–∏—Å–æ–∫ ID –∫–ª—É–±–æ–≤ —ç—Ç–æ–≥–æ —é—Ä. –ª–∏—Ü–∞
      });
    }
    
    return this.legalEntities.get(inn);
  }
  
  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –∫–ª—É–±–∞
   */
  addClub(clubData) {
    const club = {
      id: `club_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      name: clubData.name,
      brand: clubData.brand || clubData.name, // –ë—Ä–µ–Ω–¥/—Å–µ—Ç—å
      address: clubData.address,
      coordinates: clubData.coordinates || null,
      phone: clubData.phone || '',
      email: clubData.email || '',
      website: clubData.website || '',
      description: clubData.description || '',
      workingHours: clubData.workingHours || '',
      courtsCount: clubData.courtsCount || null,
      courtType: clubData.courtType || '',
      inn: clubData.inn || '', // –°–≤—è–∑—å —Å —é—Ä. –ª–∏—Ü–æ–º
      parsedAt: new Date().toISOString()
    };
    
    this.clubs.push(club);
    
    // –°–≤—è–∑—ã–≤–∞–µ–º —Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –ª–∏—Ü–æ–º
    if (club.inn && this.legalEntities.has(club.inn)) {
      this.legalEntities.get(club.inn).clubs.push(club.id);
    }
    
    return club;
  }
  
  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
   */
  toJSON() {
    return {
      summary: {
        totalLegalEntities: this.legalEntities.size,
        totalClubs: this.clubs.length,
        parsedAt: new Date().toISOString()
      },
      legalEntities: Array.from(this.legalEntities.values()),
      clubs: this.clubs
    };
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —á–µ—Ä–µ–∑ DaData API
 */
async function getCoordinatesFromDaData(address, apiKey, secret) {
  if (!apiKey || !secret || !address) {
    return null;
  }

  try {
    const url = 'https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/address';
    const headers = {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'Authorization': `Token ${apiKey}`,
      'X-Secret': secret
    };

    const response = await axios.post(url, {
      query: address,
      count: 1
    }, { headers });

    if (response.data.suggestions && response.data.suggestions.length > 0) {
      const suggestion = response.data.suggestions[0];
      const data = suggestion.data;
      
      if (data.geo_lat && data.geo_lon) {
        return {
          latitude: parseFloat(data.geo_lat),
          longitude: parseFloat(data.geo_lon),
          formattedAddress: suggestion.value,
          postalCode: data.postal_code,
          fiasId: data.fias_id,
          source: 'dadata'
        };
      }
    }
  } catch (error) {
    console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ DaData –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞: ${error.message}`);
  }

  return null;
}

/**
 * –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ DaData
 */
async function findCompanyBranches(inn, apiKey, secret) {
  if (!inn || !apiKey || !secret) {
    return [];
  }

  try {
    const url = 'https://suggestions.dadata.ru/suggestions/api/4_1/rs/findById/party';
    const headers = {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'Authorization': `Token ${apiKey}`,
      'X-Secret': secret
    };

    const response = await axios.post(url, {
      query: inn,
      branch_type: 'BRANCH' // –ò—â–µ–º —Ñ–∏–ª–∏–∞–ª—ã
    }, { headers });

    const branches = [];
    
    if (response.data.suggestions) {
      for (const suggestion of response.data.suggestions) {
        const data = suggestion.data;
        if (data.branch_type === 'BRANCH' || data.type === 'BRANCH') {
          branches.push({
            name: data.name?.short || data.name?.full || '',
            address: data.address?.value || '',
            kpp: data.kpp || '',
            manager: data.management?.name || ''
          });
        }
      }
    }
    
    return branches;
  } catch (error) {
    console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤: ${error.message}`);
  }

  return [];
}

/**
 * –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–∞–¥–µ–ª –∫–ª—É–±–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
const padelClubsData = [
  {
    name: 'Padel Friends –ö–∞–∑–∞–Ω—å',
    brand: 'Padel Friends',
    website: 'https://padelfriends.ru',
    address: '–ö–∞–∑–∞–Ω—å, –ø—Ä–æ—Å–ø–µ–∫—Ç –ê–ª—å–±–µ—Ä—Ç–∞ –ö–∞–º–∞–ª–µ–µ–≤–∞, 27–ú',
    phone: '+7 (843) 212-23-23',
    description: '6 –ø–∞–Ω–æ—Ä–∞–º–Ω—ã—Ö –∫–æ—Ä—Ç–æ–≤ Drop Shot'
  },
  {
    name: 'LUNDA Padel –ú–æ—Å–∫–≤–∞ - –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–π',
    brand: 'LUNDA Padel',
    website: 'https://lundapadel.ru',
    address: '–ú–æ—Å–∫–≤–∞, –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 36—Å33',
    phone: '+7 (800) 234-50-50',
    description: '–ö—Ä—É–ø–Ω–µ–π—à–∞—è —Å–µ—Ç—å –ø–∞–¥–µ–ª –∫–ª—É–±–æ–≤'
  },
  {
    name: 'LUNDA Padel –ú–æ—Å–∫–≤–∞ - –ö—É—Ç—É–∑–æ–≤—Å–∫–∏–π',
    brand: 'LUNDA Padel', 
    website: 'https://lundapadel.ru',
    address: '–ú–æ—Å–∫–≤–∞, –ö—É—Ç—É–∑–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 36',
    phone: '+7 (800) 234-50-50',
    description: '–ö—Ä—É–ø–Ω–µ–π—à–∞—è —Å–µ—Ç—å –ø–∞–¥–µ–ª –∫–ª—É–±–æ–≤'
  },
  {
    name: 'LUNDA Padel –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
    brand: 'LUNDA Padel',
    website: 'https://lundapadel.ru', 
    address: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ö—Ä–µ—Å—Ç–æ–≤—Å–∫–∏–π –æ—Å—Ç—Ä–æ–≤',
    phone: '+7 (800) 234-50-50',
    description: '–ö—Ä—É–ø–Ω–µ–π—à–∞—è —Å–µ—Ç—å –ø–∞–¥–µ–ª –∫–ª—É–±–æ–≤'
  },
  {
    name: '–ê–†–¢–ï–ù - –ê—Ä–µ–Ω–∞ —Ç–µ–Ω–Ω–∏—Å–∞',
    brand: '–ê–†–¢–ï–ù',
    website: 'https://artennis.ru',
    address: '–ö–∞–∑–∞–Ω—å, —É–ª. –ê–¥–æ—Ä–∞—Ç—Å–∫–æ–≥–æ, 34',
    phone: '+7 (843) 212-10-10',
    description: '–ü–∞–¥–µ–ª, —Å–∫–≤–æ—à –∏ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å'
  }
];

async function parseStructuredPadelClubs() {
  const parser = new WebsiteParser();
  const clubData = new PadelClubData();
  
  try {
    console.log('üéæ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –ø–∞–¥–µ–ª –∫–ª—É–±–æ–≤...\n');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
    const DADATA_API_KEY = process.env.DADATA_API_KEY;
    const DADATA_SECRET = process.env.DADATA_SECRET;
    
    if (!DADATA_API_KEY || !DADATA_SECRET) {
      console.log('‚ö†Ô∏è  DaData API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ\n');
    } else {
      console.log('‚úÖ DaData API –∫–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã\n');
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
    await parser.init();
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–ª—É–±
    for (let i = 0; i < padelClubsData.length; i++) {
      const club = padelClubsData[i];
      console.log(`[${i + 1}/${padelClubsData.length}] ${club.name}`);
      console.log('‚îÄ'.repeat(50));
      
      // –ü–∞—Ä—Å–∏–º —Å–∞–π—Ç
      const parseResult = await parser.parseSite(club.website);
      
      if (parseResult && parseResult.inn) {
        // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞ —á–µ—Ä–µ–∑ DaData
        if (DADATA_API_KEY && DADATA_SECRET) {
          console.log('   üîÑ –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —é—Ä. –ª–∏—Ü–∞ —á–µ—Ä–µ–∑ DaData...');
          const enrichedData = await parser.enrichWithDaData(
            parseResult.inn, 
            DADATA_API_KEY, 
            DADATA_SECRET
          );
          
          if (enrichedData) {
            // –î–æ–±–∞–≤–ª—è–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ
            const legalEntity = clubData.addLegalEntity(parseResult.inn, {
              ...enrichedData,
              website: club.website,
              emails: parseResult.emails || []
            });
            
            console.log(`   ‚úÖ –Æ—Ä. –ª–∏—Ü–æ: ${enrichedData.legalName}`);
            console.log(`   üìã –ò–ù–ù: ${parseResult.inn}`);
            console.log(`   üìç –Æ—Ä. –∞–¥—Ä–µ—Å: ${enrichedData.legalAddress}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª–∏–∞–ª—ã
            console.log('   üîç –ü–æ–∏—Å–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤...');
            const branches = await findCompanyBranches(
              parseResult.inn,
              DADATA_API_KEY,
              DADATA_SECRET
            );
            
            if (branches.length > 0) {
              console.log(`   üìå –ù–∞–π–¥–µ–Ω–æ —Ñ–∏–ª–∏–∞–ª–æ–≤: ${branches.length}`);
              branches.forEach(branch => {
                console.log(`      - ${branch.name}: ${branch.address}`);
              });
            }
          }
        }
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –∫–ª—É–±–∞
      let coordinates = null;
      if (DADATA_API_KEY && DADATA_SECRET && club.address) {
        console.log('   üó∫Ô∏è  –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª—É–±–∞...');
        coordinates = await getCoordinatesFromDaData(
          club.address, 
          DADATA_API_KEY, 
          DADATA_SECRET
        );
        
        if (coordinates) {
          console.log(`   üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${coordinates.latitude}, ${coordinates.longitude}`);
        }
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –∫–ª—É–±
      const addedClub = clubData.addClub({
        ...club,
        inn: parseResult?.inn || '',
        email: parseResult?.emails?.[0] || '',
        coordinates: coordinates
      });
      
      console.log(`   ‚úÖ –ö–ª—É–± –¥–æ–±–∞–≤–ª–µ–Ω: ${addedClub.id}`);
      console.log('');
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      if (i < padelClubsData.length - 1) {
        await parser.delay(2000);
      }
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    await parser.close();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const timestamp = new Date().toISOString().slice(0, 10);
    const outputDir = path.join(__dirname, '..', 'padel-data-structured');
    const outputFile = path.join(outputDir, `padel-clubs-structured-${timestamp}.json`);
    
    await fs.mkdir(outputDir, { recursive: true });
    
    const jsonData = clubData.toJSON();
    await fs.writeFile(outputFile, JSON.stringify(jsonData, null, 2), 'utf8');
    
    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log('‚îÄ'.repeat(50));
    console.log(`–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü –Ω–∞–π–¥–µ–Ω–æ: ${jsonData.summary.totalLegalEntities}`);
    console.log(`–§–∏–∑–∏—á–µ—Å–∫–∏—Ö –∫–ª—É–±–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${jsonData.summary.totalClubs}`);
    console.log('');
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —é—Ä. –ª–∏—Ü–∞–º
    console.log('üìã –Æ–†–ò–î–ò–ß–ï–°–ö–ò–ï –õ–ò–¶–ê:');
    console.log('‚îÄ'.repeat(50));
    jsonData.legalEntities.forEach(entity => {
      console.log(`\n${entity.legalName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}:`);
      console.log(`  –ò–ù–ù: ${entity.inn}`);
      console.log(`  –Æ—Ä. –∞–¥—Ä–µ—Å: ${entity.legalAddress}`);
      console.log(`  –ö–ª—É–±–æ–≤: ${entity.clubs.length}`);
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±—Ä–µ–Ω–¥–∞–º
    const brandStats = {};
    jsonData.clubs.forEach(club => {
      if (!brandStats[club.brand]) {
        brandStats[club.brand] = {
          count: 0,
          locations: []
        };
      }
      brandStats[club.brand].count++;
      brandStats[club.brand].locations.push(club.address.split(',')[0]);
    });
    
    console.log('\nüè¢ –°–ï–¢–ï–í–´–ï –ë–†–ï–ù–î–´:');
    console.log('‚îÄ'.repeat(50));
    Object.entries(brandStats).forEach(([brand, stats]) => {
      console.log(`\n${brand}: ${stats.count} –ª–æ–∫–∞—Ü–∏–π`);
      stats.locations.forEach(loc => console.log(`  - ${loc}`));
    });
    
    console.log('\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ' + outputFile);
    
  } catch (error) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  } finally {
    await parser.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
parseStructuredPadelClubs().catch(console.error);