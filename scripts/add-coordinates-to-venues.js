import { initializeApp } from 'firebase/app';
import { getFirestore, collection, getDocs, updateDoc, doc, GeoPoint } from 'firebase/firestore';

// Firebase config
const firebaseConfig = {
  apiKey: "AIzaSyAnp3SY9XEyF-le5q_Tcv-7Le2qqvtz0ZM",
  authDomain: "sports-booking-app-1d7e5.firebaseapp.com",
  projectId: "sports-booking-app-1d7e5",
  storageBucket: "sports-booking-app-1d7e5.firebasestorage.app",
  messagingSenderId: "648540980109",
  appId: "1:648540980109:web:97fbe182c59bb2641ab3c4",
  measurementId: "G-VL4MCP1PZP"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–ª—É–±–æ–≤ –≤ –ú–æ—Å–∫–≤–µ
const venueCoordinates = {
  'SmartPadel': {
    lat: 55.7539,
    lng: 37.6208,
    address: '—É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 12, –ú–æ—Å–∫–≤–∞'
  },
  '–¢–µ–Ω–Ω–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä Ace': {
    lat: 55.7600,
    lng: 37.6420,
    address: '–¶–≤–µ—Ç–Ω–æ–π –±—É–ª—å–≤–∞—Ä, 15, –ú–æ—Å–∫–≤–∞'
  },
  'Padel Club Moscow': {
    lat: 55.7415,
    lng: 37.6156,
    address: '—É–ª. –ë–æ–ª—å—à–∞—è –Ø–∫–∏–º–∞–Ω–∫–∞, 26, –ú–æ—Å–∫–≤–∞'
  },
  'Tennis Park': {
    lat: 55.7700,
    lng: 37.5950,
    address: '–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 36, –ú–æ—Å–∫–≤–∞'
  },
  'Sport Life': {
    lat: 55.7350,
    lng: 37.5880,
    address: '–ö—É—Ç—É–∑–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 48, –ú–æ—Å–∫–≤–∞'
  }
};

async function updateVenuesWithCoordinates() {
  try {
    console.log('üó∫Ô∏è  –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–ª—É–±–æ–≤...');
    
    const venuesSnapshot = await getDocs(collection(db, 'venues'));
    
    for (const venueDoc of venuesSnapshot.docs) {
      const venueData = venueDoc.data();
      const venueName = venueData.name;
      
      // –ù–∞—Ö–æ–¥–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–ª—É–±–∞
      const coords = Object.entries(venueCoordinates).find(([key, _]) => 
        venueName.toLowerCase().includes(key.toLowerCase()) ||
        key.toLowerCase().includes(venueName.toLowerCase())
      );
      
      if (coords) {
        const [_, coordData] = coords;
        const location = new GeoPoint(coordData.lat, coordData.lng);
        
        await updateDoc(doc(db, 'venues', venueDoc.id), {
          location: location,
          address: coordData.address,
          city: '–ú–æ—Å–∫–≤–∞',
          updatedAt: new Date()
        });
        
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω ${venueName}:`, coordData);
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–æ—Å–∫–≤—ã
        const randomLat = 55.7558 + (Math.random() - 0.5) * 0.1;
        const randomLng = 37.6173 + (Math.random() - 0.5) * 0.2;
        const location = new GeoPoint(randomLat, randomLng);
        
        await updateDoc(doc(db, 'venues', venueDoc.id), {
          location: location,
          city: '–ú–æ—Å–∫–≤–∞',
          updatedAt: new Date()
        });
        
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω ${venueName} (—Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã):`, { lat: randomLat, lng: randomLng });
      }
    }
    
    console.log('\n‚úÖ –í—Å–µ –∫–ª—É–±—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏!');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
updateVenuesWithCoordinates();