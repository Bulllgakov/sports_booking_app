#!/usr/bin/env node

/**
 * Google Places API –ø–∞—Ä—Å–µ—Ä –¥–ª—è –ø–∞–¥–µ–ª –∫–ª—É–±–æ–≤ –†–æ—Å—Å–∏–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 */

import axios from 'axios';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.join(__dirname, '.env') });

const API_KEY = process.env.GOOGLE_PLACES_API_KEY;

if (!API_KEY) {
  console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω API –∫–ª—é—á! –î–æ–±–∞–≤—å—Ç–µ GOOGLE_PLACES_API_KEY –≤ —Ñ–∞–π–ª .env');
  process.exit(1);
}

// –ì–æ—Ä–æ–¥–∞ –†–æ—Å—Å–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞–¥–µ–ª –∫–ª—É–±–æ–≤
const RUSSIAN_CITIES = [
  // –ù–∞—á–Ω–µ–º —Å –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
  { name: '–ú–æ—Å–∫–≤–∞', lat: 55.755826, lng: 37.617300, radius: 50000 },
  { name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', lat: 59.931226, lng: 30.360940, radius: 40000 },
  { name: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', lat: 55.008353, lng: 82.935733, radius: 30000 },
  { name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', lat: 56.838011, lng: 60.597474, radius: 30000 },
  { name: '–ö–∞–∑–∞–Ω—å', lat: 55.798551, lng: 49.106324, radius: 25000 },
  { name: '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', lat: 56.326797, lng: 44.006516, radius: 25000 },
  { name: '–ß–µ–ª—è–±–∏–Ω—Å–∫', lat: 55.159902, lng: 61.402554, radius: 25000 },
  { name: '–°–∞–º–∞—Ä–∞', lat: 53.195538, lng: 50.101783, radius: 25000 },
  { name: '–û–º—Å–∫', lat: 54.989342, lng: 73.368212, radius: 25000 },
  { name: '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', lat: 47.222078, lng: 39.720349, radius: 25000 },
  { name: '–£—Ñ–∞', lat: 54.735152, lng: 55.958736, radius: 25000 },
  { name: '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', lat: 56.010563, lng: 92.852572, radius: 25000 },
  { name: '–í–æ—Ä–æ–Ω–µ–∂', lat: 51.672, lng: 39.1843, radius: 20000 },
  { name: '–ü–µ—Ä–º—å', lat: 58.0105, lng: 56.2502, radius: 20000 },
  { name: '–í–æ–ª–≥–æ–≥—Ä–∞–¥', lat: 48.708048, lng: 44.513303, radius: 20000 },
  { name: '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä', lat: 45.035470, lng: 38.975313, radius: 20000 },
  { name: '–°–æ—á–∏', lat: 43.585525, lng: 39.723062, radius: 30000 },
  { name: '–¢—é–º–µ–Ω—å', lat: 57.1522, lng: 65.5272, radius: 20000 },
  { name: '–¢–æ–ª—å—è—Ç—Ç–∏', lat: 53.5303, lng: 49.3461, radius: 20000 },
  { name: '–ò–∂–µ–≤—Å–∫', lat: 56.8527, lng: 53.2116, radius: 20000 },
  { name: '–ë–∞—Ä–Ω–∞—É–ª', lat: 53.3606, lng: 83.7636, radius: 20000 },
  { name: '–£–ª—å—è–Ω–æ–≤—Å–∫', lat: 54.3282, lng: 48.3866, radius: 20000 },
  { name: '–ò—Ä–∫—É—Ç—Å–∫', lat: 52.2978, lng: 104.2964, radius: 20000 },
  { name: '–•–∞–±–∞—Ä–æ–≤—Å–∫', lat: 48.4827, lng: 135.0838, radius: 20000 },
  { name: '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', lat: 43.1332, lng: 131.9113, radius: 20000 },
  { name: '–Ø—Ä–æ—Å–ª–∞–≤–ª—å', lat: 57.6261, lng: 39.8845, radius: 20000 },
  { name: '–ú–∞—Ö–∞—á–∫–∞–ª–∞', lat: 42.9849, lng: 47.5047, radius: 20000 },
  { name: '–¢–æ–º—Å–∫', lat: 56.4977, lng: 84.9744, radius: 20000 },
  { name: '–û—Ä–µ–Ω–±—É—Ä–≥', lat: 51.7681, lng: 55.0968, radius: 20000 },
  { name: '–ö–µ–º–µ—Ä–æ–≤–æ', lat: 55.3333, lng: 86.0833, radius: 20000 },
  { name: '–†—è–∑–∞–Ω—å', lat: 54.6269, lng: 39.6916, radius: 15000 },
  { name: '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å', lat: 46.3497, lng: 48.0408, radius: 15000 },
  { name: '–ü–µ–Ω–∑–∞', lat: 53.1958, lng: 45.0183, radius: 15000 },
  { name: '–õ–∏–ø–µ—Ü–∫', lat: 52.6031, lng: 39.5708, radius: 15000 },
  { name: '–¢—É–ª–∞', lat: 54.2044, lng: 37.6111, radius: 15000 },
  { name: '–ö–∏—Ä–æ–≤', lat: 58.6035, lng: 49.6679, radius: 15000 },
  { name: '–ß–µ–±–æ–∫—Å–∞—Ä—ã', lat: 56.1324, lng: 47.2519, radius: 15000 },
  { name: '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥', lat: 54.7104, lng: 20.4522, radius: 15000 },
  { name: '–ë—Ä—è–Ω—Å–∫', lat: 53.2521, lng: 34.3717, radius: 15000 },
  { name: '–ö—É—Ä—Å–∫', lat: 51.7303, lng: 36.1930, radius: 15000 },
  { name: '–ò–≤–∞–Ω–æ–≤–æ', lat: 57.0000, lng: 40.9739, radius: 15000 },
  { name: '–ú–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫', lat: 53.4242, lng: 58.9815, radius: 15000 },
  { name: '–¢–≤–µ—Ä—å', lat: 56.8587, lng: 35.9176, radius: 15000 },
  { name: '–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å', lat: 45.0428, lng: 41.9734, radius: 15000 },
  { name: '–ë–µ–ª–≥–æ—Ä–æ–¥', lat: 50.5997, lng: 36.5983, radius: 15000 },
  { name: '–°—É—Ä–≥—É—Ç', lat: 61.2500, lng: 73.4167, radius: 15000 },
  { name: '–í–ª–∞–¥–∏–º–∏—Ä', lat: 56.1365, lng: 40.3966, radius: 15000 },
  { name: '–ù–∏–∂–Ω–∏–π –¢–∞–≥–∏–ª', lat: 57.9195, lng: 59.9652, radius: 15000 },
  { name: '–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫', lat: 64.5401, lng: 40.5433, radius: 15000 },
  { name: '–ö–∞–ª—É–≥–∞', lat: 54.5293, lng: 36.2754, radius: 15000 }
];

class GooglePlacesParser {
  constructor() {
    this.clubs = [];
    this.outputDir = path.join(__dirname, '../padel-data-google');
    this.requestCount = 0;
    this.monthlyLimit = 25000; // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ª–∏–º–∏—Ç –Ω–∞ $200
  }

  async init() {
    await fs.mkdir(this.outputDir, { recursive: true });
    console.log('üéæ GOOGLE PLACES API –ü–ê–†–°–ï–† –î–õ–Ø –ü–ê–î–ï–õ –ö–õ–£–ë–û–í');
    console.log('===========================================');
    console.log(`üìç –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${RUSSIAN_CITIES.length} –≥–æ—Ä–æ–¥–æ–≤\n`);
  }

  async searchNearby(city, keyword = '–ø–∞–¥–µ–ª') {
    const url = 'https://maps.googleapis.com/maps/api/place/nearbysearch/json';
    const params = {
      location: `${city.lat},${city.lng}`,
      radius: city.radius,
      keyword: keyword,
      type: 'establishment',
      language: 'ru',
      key: API_KEY
    };

    try {
      console.log(`  üîç –ü–æ–∏—Å–∫ "${keyword}" –≤ —Ä–∞–¥–∏—É—Å–µ ${city.radius}–º...`);
      const response = await axios.get(url, { params });
      this.requestCount++;
      
      if (response.data.status === 'OK') {
        return response.data.results;
      } else if (response.data.status === 'ZERO_RESULTS') {
        console.log(`  ‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
        return [];
      } else {
        console.error(`  ‚ùå –û—à–∏–±–∫–∞ API: ${response.data.status}`);
        return [];
      }
    } catch (error) {
      console.error(`  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
      return [];
    }
  }

  async getPlaceDetails(placeId) {
    const url = 'https://maps.googleapis.com/maps/api/place/details/json';
    const params = {
      place_id: placeId,
      fields: 'name,formatted_address,geometry,formatted_phone_number,international_phone_number,website,opening_hours,business_status,rating,user_ratings_total,photos,types,url,vicinity,plus_code,price_level',
      language: 'ru',
      key: API_KEY
    };

    try {
      const response = await axios.get(url, { params });
      this.requestCount++;
      
      if (response.data.status === 'OK') {
        return response.data.result;
      } else {
        console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: ${response.data.status}`);
        return null;
      }
    } catch (error) {
      console.error(`  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–µ—Ç–∞–ª–µ–π: ${error.message}`);
      return null;
    }
  }

  formatClubData(place, details, city) {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã AllCourt
    const club = {
      // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
      name: place.name,
      address: details?.formatted_address || place.vicinity || '',
      latitude: place.geometry.location.lat,
      longitude: place.geometry.location.lng,
      
      // –ö–æ–Ω—Ç–∞–∫—Ç—ã
      phone: details?.formatted_phone_number || details?.international_phone_number || '',
      website: details?.website || '',
      
      // –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
      openTime: '',
      closeTime: '',
      workingDays: [],
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      rating: place.rating || 0,
      reviewsCount: place.user_ratings_total || 0,
      priceLevel: place.price_level || null,
      businessStatus: details?.business_status || place.business_status || '',
      googlePlaceId: place.place_id,
      googleMapsUrl: details?.url || '',
      
      // –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
      photos: [],
      
      // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      sports: ['padel'],
      city: city.name,
      types: place.types || [],
      source: 'Google Places API',
      parsedAt: new Date().toISOString()
    };

    // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    if (details?.opening_hours?.weekday_text) {
      const hours = this.parseOpeningHours(details.opening_hours);
      club.openTime = hours.openTime;
      club.closeTime = hours.closeTime;
      club.workingDays = hours.workingDays;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    if (details?.photos && details.photos.length > 0) {
      club.photos = details.photos.slice(0, 10).map(photo => 
        `https://maps.googleapis.com/maps/api/place/photo?maxwidth=800&photoreference=${photo.photo_reference}&key=${API_KEY}`
      );
    }

    return club;
  }

  parseOpeningHours(openingHours) {
    const result = {
      openTime: '',
      closeTime: '',
      workingDays: []
    };

    if (!openingHours.periods) return result;

    // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º–æ–µ —Ä–∞–Ω–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ —Å–∞–º–æ–µ –ø–æ–∑–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è
    let minOpen = 2400;
    let maxClose = 0;
    const daysOpen = new Set();

    openingHours.periods.forEach(period => {
      if (period.open) {
        const openTime = parseInt(period.open.time);
        if (openTime < minOpen) minOpen = openTime;
        daysOpen.add(period.open.day);
      }
      if (period.close) {
        const closeTime = parseInt(period.close.time);
        if (closeTime > maxClose) maxClose = closeTime;
      }
    });

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    if (minOpen < 2400) {
      const hours = Math.floor(minOpen / 100);
      const minutes = minOpen % 100;
      result.openTime = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;
    }

    if (maxClose > 0) {
      const hours = Math.floor(maxClose / 100);
      const minutes = maxClose % 100;
      result.closeTime = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;
    }

    // –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    const dayNames = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
    result.workingDays = Array.from(daysOpen).map(day => dayNames[day]);

    return result;
  }

  async parseCityClubs(city) {
    console.log(`\nüìç ${city.name}`);
    console.log(`   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${city.lat}, ${city.lng}`);
    
    const allResults = [];
    
    // –ò—â–µ–º –ø–æ —Ä–∞–∑–Ω—ã–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    const keywords = ['–ø–∞–¥–µ–ª', 'padel', '–ø–∞–¥–µ–ª –∫–ª—É–±', 'padel club', '–ø–∞–¥–µ–ª –∫–æ—Ä—Ç'];
    
    for (const keyword of keywords) {
      const results = await this.searchNearby(city, keyword);
      allResults.push(...results);
      await this.delay(1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    }

    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ place_id
    const uniquePlaces = new Map();
    allResults.forEach(place => {
      if (!uniquePlaces.has(place.place_id)) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–≤—è–∑–∞–Ω–æ —Å –ø–∞–¥–µ–ª–æ–º
        const name = place.name.toLowerCase();
        const types = place.types.join(' ').toLowerCase();
        
        if (name.includes('–ø–∞–¥–µ–ª') || name.includes('padel') || 
            types.includes('—Å–ø–æ—Ä—Ç') || types.includes('sport')) {
          uniquePlaces.set(place.place_id, place);
        }
      }
    });

    console.log(`  üìä –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç: ${uniquePlaces.size}`);

    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const cityClubs = [];
    let processed = 0;
    
    for (const [placeId, place] of uniquePlaces) {
      processed++;
      console.log(`  üìç [${processed}/${uniquePlaces.size}] ${place.name}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏
      const details = await this.getPlaceDetails(placeId);
      await this.delay(500);
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      const club = this.formatClubData(place, details, city);
      cityClubs.push(club);
      
      // –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      console.log(`     ‚úÖ ${club.name}`);
      console.log(`     üìç ${club.latitude.toFixed(6)}, ${club.longitude.toFixed(6)}`);
      if (club.phone) console.log(`     üìû ${club.phone}`);
      if (club.website) console.log(`     üåê ${club.website}`);
      if (club.photos.length) console.log(`     üì∏ ${club.photos.length} —Ñ–æ—Ç–æ`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
      if (this.requestCount >= this.monthlyLimit * 0.8) {
        console.warn(`\n‚ö†Ô∏è  –ü—Ä–∏–±–ª–∏–∂–∞–µ–º—Å—è –∫ –º–µ—Å—è—á–Ω–æ–º—É –ª–∏–º–∏—Ç—É (${this.requestCount} –∑–∞–ø—Ä–æ—Å–æ–≤)`);
      }
    }

    return cityClubs;
  }

  async parseAllCities() {
    for (const city of RUSSIAN_CITIES) {
      const cityClubs = await this.parseCityClubs(city);
      this.clubs.push(...cityClubs);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      await this.saveIntermediateResults(city.name, cityClubs);
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥–æ—Ä–æ–¥–∞–º–∏
      await this.delay(2000);
      
      console.log(`\nüìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
      console.log(`   –í—Å–µ–≥–æ –∫–ª—É–±–æ–≤: ${this.clubs.length}`);
      console.log(`   API –∑–∞–ø—Ä–æ—Å–æ–≤: ${this.requestCount}`);
    }
  }

  async saveIntermediateResults(cityName, clubs) {
    if (clubs.length === 0) return;
    
    const cityDir = path.join(this.outputDir, 'cities');
    await fs.mkdir(cityDir, { recursive: true });
    
    const filename = `${cityName.toLowerCase().replace(/\s+/g, '-')}.json`;
    const filepath = path.join(cityDir, filename);
    
    await fs.writeFile(filepath, JSON.stringify(clubs, null, 2));
    console.log(`   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${clubs.length} –∫–ª—É–±–æ–≤`);
  }

  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async saveResults() {
    // –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –∫–ª—É–±–∞–º–∏
    const allClubsPath = path.join(this.outputDir, `all-padel-clubs-russia.json`);
    await fs.writeFile(allClubsPath, JSON.stringify(this.clubs, null, 2));
    
    // –§–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ Firebase
    const firebaseData = this.clubs.map((club, index) => ({
      id: `padel_${Date.now()}_${index}`,
      name: club.name,
      address: club.address,
      latitude: club.latitude,
      longitude: club.longitude,
      phone: club.phone,
      email: '',
      website: club.website,
      description: `–†–µ–π—Ç–∏–Ω–≥: ${club.rating}/5 (${club.reviewsCount} –æ—Ç–∑—ã–≤–æ–≤)`,
      logoUrl: club.photos[0] || '',
      photos: club.photos,
      amenities: [],
      features: [],
      sports: ['padel'],
      status: 'inactive',
      public: false,
      openTime: club.openTime || '07:00',
      closeTime: club.closeTime || '23:00',
      workingDays: club.workingDays,
      minPrice: null,
      maxPrice: null,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      source: 'Google Places API',
      googlePlaceId: club.googlePlaceId,
      googleMapsUrl: club.googleMapsUrl
    }));
    
    const firebasePath = path.join(this.outputDir, 'firebase-import.json');
    await fs.writeFile(firebasePath, JSON.stringify(firebaseData, null, 2));
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const stats = {
      totalClubs: this.clubs.length,
      byCity: {},
      withPhone: this.clubs.filter(c => c.phone).length,
      withWebsite: this.clubs.filter(c => c.website).length,
      withPhotos: this.clubs.filter(c => c.photos && c.photos.length > 0).length,
      withWorkingHours: this.clubs.filter(c => c.openTime && c.closeTime).length,
      averageRating: this.clubs.reduce((sum, c) => sum + (c.rating || 0), 0) / this.clubs.length,
      totalReviews: this.clubs.reduce((sum, c) => sum + (c.reviewsCount || 0), 0),
      apiRequestsUsed: this.requestCount,
      parsedAt: new Date().toISOString()
    };
    
    this.clubs.forEach(club => {
      stats.byCity[club.city] = (stats.byCity[club.city] || 0) + 1;
    });
    
    const statsPath = path.join(this.outputDir, 'statistics.json');
    await fs.writeFile(statsPath, JSON.stringify(stats, null, 2));
    
    // CSV –¥–ª—è Excel
    const csvContent = this.generateCSV();
    const csvPath = path.join(this.outputDir, 'padel-clubs-google.csv');
    await fs.writeFile(csvPath, csvContent, 'utf8');
    
    console.log('\n\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log('=====================================');
    console.log(`‚úÖ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: ${stats.totalClubs} –ø–∞–¥–µ–ª –∫–ª—É–±–æ–≤`);
    console.log(`üìû –° —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏: ${stats.withPhone} (${Math.round(stats.withPhone/stats.totalClubs*100)}%)`);
    console.log(`üåê –° —Å–∞–π—Ç–∞–º–∏: ${stats.withWebsite} (${Math.round(stats.withWebsite/stats.totalClubs*100)}%)`);
    console.log(`üì∏ –° —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏: ${stats.withPhotos} (${Math.round(stats.withPhotos/stats.totalClubs*100)}%)`);
    console.log(`üïê –° —á–∞—Å–∞–º–∏ —Ä–∞–±–æ—Ç—ã: ${stats.withWorkingHours} (${Math.round(stats.withWorkingHours/stats.totalClubs*100)}%)`);
    console.log(`‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${stats.averageRating.toFixed(1)}/5`);
    console.log(`üí¨ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: ${stats.totalReviews}`);
    console.log(`üì° API –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${stats.apiRequestsUsed}`);
    console.log(`üí∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${(stats.apiRequestsUsed * 0.008).toFixed(2)}`);
    console.log(`\nüìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${this.outputDir}`);
  }

  generateCSV() {
    const headers = [
      '–ù–∞–∑–≤–∞–Ω–∏–µ', '–ì–æ—Ä–æ–¥', '–ê–¥—Ä–µ—Å', '–®–∏—Ä–æ—Ç–∞', '–î–æ–ª–≥–æ—Ç–∞', 
      '–¢–µ–ª–µ—Ñ–æ–Ω', '–°–∞–π—Ç', '–†–µ–π—Ç–∏–Ω–≥', '–û—Ç–∑—ã–≤—ã', 
      '–í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è', '–í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è', '–ö–æ–ª-–≤–æ —Ñ–æ—Ç–æ', 
      'Google Maps URL'
    ];
    
    const rows = this.clubs.map(club => [
      club.name,
      club.city,
      club.address,
      club.latitude,
      club.longitude,
      club.phone || '',
      club.website || '',
      club.rating || '',
      club.reviewsCount || '',
      club.openTime || '',
      club.closeTime || '',
      club.photos ? club.photos.length : 0,
      club.googleMapsUrl || ''
    ]);
    
    const csvRows = [
      headers.join(';'),
      ...rows.map(row => row.map(cell => `"${cell}"`).join(';'))
    ];
    
    return '\ufeff' + csvRows.join('\n');
  }

  async run() {
    try {
      await this.init();
      
      // –ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
      const testMode = process.argv.includes('--test');
      
      if (testMode) {
        console.log('üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - —Ç–æ–ª—å–∫–æ –ú–æ—Å–∫–≤–∞\n');
        const moscow = RUSSIAN_CITIES[0];
        const clubs = await this.parseCityClubs(moscow);
        this.clubs.push(...clubs);
      } else {
        await this.parseAllCities();
      }
      
      await this.saveResults();
      console.log('\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      
    } catch (error) {
      console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á—Ç–æ —É—Å–ø–µ–ª–∏ —Å–æ–±—Ä–∞—Ç—å
      if (this.clubs.length > 0) {
        await this.saveResults();
        console.log(`\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${this.clubs.length} –∫–ª—É–±–æ–≤ –¥–æ –æ—à–∏–±–∫–∏`);
      }
    }
  }
}

// –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞
const parser = new GooglePlacesParser();
parser.run().catch(console.error);