#!/usr/bin/env node

/**
 * –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –ø–∞–¥–µ–ª –∫–ª—É–±–æ–≤
 * –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—É–±–µ (–≤–∫–ª—é—á–∞—è —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é) –≤ –æ–¥–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ
 * –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ø–Ω–¥–µ–∫—Å –ì–µ–æ–∫–æ–¥–µ—Ä –∏ DaData
 */

import WebsiteParser from './website-parser.js';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';
import axios from 'axios';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.join(__dirname, '.env') });

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å –ì–µ–æ–∫–æ–¥–µ—Ä API
 * –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç: 1000 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏
 */
async function getCoordinatesFromYandex(address, apiKey) {
  if (!apiKey || !address) {
    return null;
  }

  try {
    const url = 'https://geocode-maps.yandex.ru/1.x/';
    const response = await axios.get(url, {
      params: {
        apikey: apiKey,
        geocode: address,
        format: 'json',
        results: 1,
        lang: 'ru_RU'
      }
    });

    const geoObject = response.data?.response?.GeoObjectCollection?.featureMember?.[0]?.GeoObject;
    
    if (geoObject) {
      const [lng, lat] = geoObject.Point.pos.split(' ').map(parseFloat);
      
      return {
        latitude: lat,
        longitude: lng,
        formattedAddress: geoObject.metaDataProperty.GeocoderMetaData.text,
        precision: geoObject.metaDataProperty.GeocoderMetaData.precision,
        source: 'yandex'
      };
    }
  } catch (error) {
    console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ø–Ω–¥–µ–∫—Å –ì–µ–æ–∫–æ–¥–µ—Ä–∞: ${error.message}`);
  }

  return null;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —á–µ—Ä–µ–∑ DaData API
 */
async function getCoordinatesFromDaData(address, apiKey, secret) {
  if (!apiKey || !secret || !address) {
    return null;
  }

  try {
    const url = 'https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/address';
    const headers = {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'Authorization': `Token ${apiKey}`,
      'X-Secret': secret
    };

    const response = await axios.post(url, {
      query: address,
      count: 1
    }, { headers });

    if (response.data.suggestions && response.data.suggestions.length > 0) {
      const suggestion = response.data.suggestions[0];
      const data = suggestion.data;
      
      if (data.geo_lat && data.geo_lon) {
        return {
          latitude: parseFloat(data.geo_lat),
          longitude: parseFloat(data.geo_lon),
          formattedAddress: suggestion.value,
          postalCode: data.postal_code,
          fiasId: data.fias_id,
          source: 'dadata'
        };
      }
    }
  } catch (error) {
    console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ DaData –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞: ${error.message}`);
  }

  return null;
}

/**
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—É–±–µ
 */
class CompleteClubInfo {
  constructor(clubData) {
    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—É–±–µ
    this.id = `club_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    this.name = clubData.name || '';
    this.brand = clubData.brand || clubData.name;
    this.website = clubData.website || '';
    this.description = clubData.description || '';
    
    // –§–∏–∑–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å –∫–ª—É–±–∞ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    this.clubAddress = clubData.address || '';
    this.coordinates = clubData.coordinates || null;
    
    // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    this.phone = clubData.phone || '';
    this.email = clubData.email || '';
    this.workingHours = clubData.workingHours || '';
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ä—Ç–∞—Ö
    this.courtsCount = clubData.courtsCount || null;
    this.courtType = clubData.courtType || '';
    this.priceRange = clubData.priceRange || '';
    
    // –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    this.legalInfo = {
      inn: clubData.inn || '',
      ogrn: clubData.ogrn || '',
      kpp: clubData.kpp || '',
      legalName: clubData.legalName || '',
      legalAddress: clubData.legalAddress || '',
      okved: clubData.okved || '',
      okvedDescription: clubData.okvedDescription || '',
      managementName: clubData.managementName || '',
      managementPost: clubData.managementPost || '',
      foundedDate: clubData.foundedDate || null,
      capital: clubData.capital || null,
      employeeCount: clubData.employeeCount || null,
      organizationStatus: clubData.organizationStatus || ''
    };
    
    // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
    this.parsedAt = new Date().toISOString();
    this.dataSource = clubData.dataSource || 'website';
    this.parseErrors = clubData.parseErrors || [];
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö
   */
  getDataCompleteness() {
    let score = 0;
    let maxScore = 0;
    
    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (this.name) score += 10;
    maxScore += 10;
    
    if (this.clubAddress) score += 10;
    maxScore += 10;
    
    if (this.coordinates) score += 15;
    maxScore += 15;
    
    if (this.phone) score += 5;
    maxScore += 5;
    
    if (this.email) score += 5;
    maxScore += 5;
    
    // –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (this.legalInfo.inn) score += 15;
    maxScore += 15;
    
    if (this.legalInfo.legalName) score += 10;
    maxScore += 10;
    
    if (this.legalInfo.legalAddress) score += 5;
    maxScore += 5;
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ä—Ç–∞—Ö
    if (this.courtsCount) score += 5;
    maxScore += 5;
    
    return {
      score,
      maxScore,
      percentage: Math.round((score / maxScore) * 100)
    };
  }
}

/**
 * –†–µ–∞–ª—å–Ω—ã–µ –ø–∞–¥–µ–ª –∫–ª—É–±—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
const testPadelClubs = [
  {
    name: '–ê–†–¢–ï–ù - –ê—Ä–µ–Ω–∞ —Ç–µ–Ω–Ω–∏—Å–∞',
    brand: '–ê–†–¢–ï–ù',
    website: 'https://artennis.ru',
    address: '–ö–∞–∑–∞–Ω—å, —É–ª. –†–æ–¥–∏–Ω–∞, 10', // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
    phone: '+7 (843) 212-10-10',
    description: '–ü–∞–¥–µ–ª, —Å–∫–≤–æ—à –∏ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å',
    courtsCount: 4,
    priceRange: '2500 —Ä—É–±/—á–∞—Å'
  },
  {
    name: 'Padel Friends –ö–∞–∑–∞–Ω—å',
    brand: 'Padel Friends',
    website: 'https://padelfriends.ru',
    address: '–ö–∞–∑–∞–Ω—å, –ø—Ä–æ—Å–ø–µ–∫—Ç –ê–ª—å–±–µ—Ä—Ç–∞ –ö–∞–º–∞–ª–µ–µ–≤–∞, 27–ú',
    phone: '+7 (843) 212-23-23',
    description: '6 –ø–∞–Ω–æ—Ä–∞–º–Ω—ã—Ö –∫–æ—Ä—Ç–æ–≤ Drop Shot',
    courtsCount: 6,
    courtType: 'Drop Shot'
  },
  {
    name: 'LUNDA Padel –ú–æ—Å–∫–≤–∞ - –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–π',
    brand: 'LUNDA Padel',
    website: 'https://lundapadel.ru',
    address: '–ú–æ—Å–∫–≤–∞, –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 36—Å33',
    phone: '+7 (800) 234-50-50',
    description: '–ü—Ä–µ–º–∏—É–º –ø–∞–¥–µ–ª –∫–ª—É–±',
    courtsCount: 8
  },
  {
    name: 'LUNDA Padel –ú–æ—Å–∫–≤–∞ - –ö—É—Ç—É–∑–æ–≤—Å–∫–∏–π',
    brand: 'LUNDA Padel',
    website: 'https://lundapadel.ru',
    address: '–ú–æ—Å–∫–≤–∞, –ö—É—Ç—É–∑–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 36—Å3',
    phone: '+7 (800) 234-50-50',
    description: '–ü—Ä–µ–º–∏—É–º –ø–∞–¥–µ–ª –∫–ª—É–±',
    courtsCount: 6
  },
  {
    name: 'LUNDA Padel –ö–∞–∑–∞–Ω—å',
    brand: 'LUNDA Padel',
    website: 'https://lundapadel.ru',
    address: '–ö–∞–∑–∞–Ω—å, —É–ª. –°–∏–±–≥–∞—Ç–∞ –•–∞–∫–∏–º–∞, 60',
    phone: '+7 (800) 234-50-50',
    description: '–ü—Ä–µ–º–∏—É–º –ø–∞–¥–µ–ª –∫–ª—É–±',
    courtsCount: 4
  }
];

async function parseCompletePadelClubs() {
  const parser = new WebsiteParser();
  const results = [];
  
  try {
    console.log('üéæ –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –ø–∞–¥–µ–ª –∫–ª—É–±–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏...\n');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
    const DADATA_API_KEY = process.env.DADATA_API_KEY;
    const DADATA_SECRET = process.env.DADATA_SECRET;
    const YANDEX_API_KEY = process.env.YANDEX_GEOCODER_API_KEY;
    
    console.log('üìã –°—Ç–∞—Ç—É—Å API –∫–ª—é—á–µ–π:');
    console.log(`  DaData: ${DADATA_API_KEY ? '‚úÖ' : '‚ùå'}`);
    console.log(`  –Ø–Ω–¥–µ–∫—Å –ì–µ–æ–∫–æ–¥–µ—Ä: ${YANDEX_API_KEY ? '‚úÖ' : '‚ùå'}`);
    console.log('');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
    await parser.init();
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–ª—É–±
    for (let i = 0; i < testPadelClubs.length; i++) {
      const club = testPadelClubs[i];
      console.log(`[${i + 1}/${testPadelClubs.length}] ${club.name}`);
      console.log('‚îÄ'.repeat(50));
      
      // –ü–∞—Ä—Å–∏–º —Å–∞–π—Ç
      const parseResult = await parser.parseSite(club.website);
      
      const clubInfo = new CompleteClubInfo({
        ...club,
        email: parseResult?.emails?.[0] || '',
        inn: parseResult?.inn || '',
        ogrn: parseResult?.ogrn || ''
      });
      
      // –û–±–æ–≥–∞—â–∞–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ DaData
      if (parseResult?.inn && DADATA_API_KEY && DADATA_SECRET) {
        console.log('   üîÑ –û–±–æ–≥–∞—â–∞–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ DaData...');
        const enrichedData = await parser.enrichWithDaData(
          parseResult.inn, 
          DADATA_API_KEY, 
          DADATA_SECRET
        );
        
        if (enrichedData) {
          clubInfo.legalInfo = {
            ...clubInfo.legalInfo,
            ...enrichedData,
            inn: parseResult.inn
          };
          console.log(`   ‚úÖ –Æ—Ä. –ª–∏—Ü–æ: ${enrichedData.legalName}`);
          console.log(`   üìã –ò–ù–ù: ${parseResult.inn}`);
          console.log(`   üìç –Æ—Ä. –∞–¥—Ä–µ—Å: ${enrichedData.legalAddress}`);
        }
      } else if (parseResult?.inn) {
        console.log(`   üìã –ò–ù–ù –Ω–∞–π–¥–µ–Ω: ${parseResult.inn}`);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –∫–ª—É–±–∞
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –Ø–Ω–¥–µ–∫—Å -> DaData
      let coordinates = null;
      
      if (YANDEX_API_KEY && club.address) {
        console.log('   üó∫Ô∏è  –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å...');
        coordinates = await getCoordinatesFromYandex(club.address, YANDEX_API_KEY);
        
        if (coordinates) {
          console.log(`   üìç –Ø–Ω–¥–µ–∫—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${coordinates.latitude}, ${coordinates.longitude}`);
        }
      }
      
      if (!coordinates && DADATA_API_KEY && DADATA_SECRET && club.address) {
        console.log('   üó∫Ô∏è  –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ DaData...');
        coordinates = await getCoordinatesFromDaData(
          club.address, 
          DADATA_API_KEY, 
          DADATA_SECRET
        );
        
        if (coordinates) {
          console.log(`   üìç DaData –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${coordinates.latitude}, ${coordinates.longitude}`);
        }
      }
      
      clubInfo.coordinates = coordinates;
      
      // –û—Ü–µ–Ω–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö
      const completeness = clubInfo.getDataCompleteness();
      console.log(`   üìä –ü–æ–ª–Ω–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: ${completeness.percentage}% (${completeness.score}/${completeness.maxScore})`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º email –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
      if (parseResult?.emails?.length > 0) {
        clubInfo.email = parseResult.emails[0];
        console.log(`   üìß Email: ${clubInfo.email}`);
      }
      
      results.push(clubInfo);
      console.log('');
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      if (i < testPadelClubs.length - 1) {
        await parser.delay(2000);
      }
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    await parser.close();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const timestamp = new Date().toISOString().slice(0, 10);
    const outputDir = path.join(__dirname, '..', 'padel-data-complete');
    const outputFile = path.join(outputDir, `padel-clubs-complete-${timestamp}.json`);
    
    await fs.mkdir(outputDir, { recursive: true });
    await fs.writeFile(outputFile, JSON.stringify(results, null, 2), 'utf8');
    
    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log('‚îÄ'.repeat(50));
    console.log(`–í—Å–µ–≥–æ –∫–ª—É–±–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${results.length}`);
    console.log(`–° –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: ${results.filter(r => r.coordinates).length}`);
    console.log(`  - —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å: ${results.filter(r => r.coordinates?.source === 'yandex').length}`);
    console.log(`  - —á–µ—Ä–µ–∑ DaData: ${results.filter(r => r.coordinates?.source === 'dadata').length}`);
    console.log(`–° –ò–ù–ù: ${results.filter(r => r.legalInfo.inn).length}`);
    console.log(`–° —é—Ä. –Ω–∞–∑–≤–∞–Ω–∏–µ–º: ${results.filter(r => r.legalInfo.legalName).length}`);
    console.log(`–° email: ${results.filter(r => r.email).length}`);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª–Ω–æ—Ç–µ –¥–∞–Ω–Ω—ã—Ö
    const avgCompleteness = results.reduce((sum, club) => 
      sum + club.getDataCompleteness().percentage, 0) / results.length;
    console.log(`\n–°—Ä–µ–¥–Ω—è—è –ø–æ–ª–Ω–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: ${Math.round(avgCompleteness)}%`);
    
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –±—Ä–µ–Ω–¥–∞–º
    const brandStats = {};
    results.forEach(club => {
      if (!brandStats[club.brand]) {
        brandStats[club.brand] = [];
      }
      brandStats[club.brand].push({
        name: club.name,
        city: club.clubAddress.split(',')[0],
        completeness: club.getDataCompleteness().percentage
      });
    });
    
    console.log('\nüè¢ –°–ï–¢–ï–í–´–ï –ë–†–ï–ù–î–´:');
    console.log('‚îÄ'.repeat(50));
    Object.entries(brandStats).forEach(([brand, clubs]) => {
      console.log(`\n${brand}: ${clubs.length} –ª–æ–∫–∞—Ü–∏–π`);
      clubs.forEach(club => {
        console.log(`  - ${club.city} (–ø–æ–ª–Ω–æ—Ç–∞: ${club.completeness}%)`);
      });
    });
    
    console.log('\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ' + outputFile);
    
  } catch (error) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  } finally {
    await parser.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
parseCompletePadelClubs().catch(console.error);