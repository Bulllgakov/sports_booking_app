#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä - —Ç–æ–ª—å–∫–æ –ú–æ—Å–∫–≤–∞
 */

import puppeteer from 'puppeteer';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class PadelTestParser {
  constructor() {
    this.browser = null;
    this.outputDir = path.join(__dirname, '../padel-data-test');
  }

  async init() {
    await fs.mkdir(this.outputDir, { recursive: true });
    
    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...');
    this.browser = await puppeteer.launch({
      headless: false,
      defaultViewport: null,
      args: [
        '--start-maximized',
        '--disable-blink-features=AutomationControlled'
      ]
    });
  }

  async parseYandexMoscow() {
    const page = await this.browser.newPage();
    const clubs = [];
    
    try {
      const url = 'https://yandex.ru/maps/moscow/search/–ø–∞–¥–µ–ª%20–∫–ª—É–±/';
      console.log('üîç –ò—â–µ–º –ø–∞–¥–µ–ª –∫–ª—É–±—ã –≤ –ú–æ—Å–∫–≤–µ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö...');
      
      await page.goto(url, { waitUntil: 'networkidle2', timeout: 60000 });
      await this.delay(3000);
      
      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      await page.waitForSelector('.search-snippet-view', { timeout: 10000 }).catch(() => {
        console.log('‚ö†Ô∏è  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      });
      
      // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      console.log('üìú –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...');
      for (let i = 0; i < 3; i++) {
        await page.evaluate(() => {
          const searchResults = document.querySelector('.search-list-view__list');
          if (searchResults) searchResults.scrollTop = searchResults.scrollHeight;
        });
        await this.delay(2000);
      }
      
      // –°–æ–±–∏—Ä–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      const searchResults = await page.evaluate(() => {
        const results = [];
        const items = document.querySelectorAll('.search-snippet-view');
        
        items.forEach((item, index) => {
          try {
            const name = item.querySelector('.search-business-snippet-view__title')?.textContent?.trim();
            const address = item.querySelector('.search-business-snippet-view__address')?.textContent?.trim();
            const category = item.querySelector('.search-business-snippet-view__category')?.textContent?.trim();
            
            if (name) {
              results.push({
                index,
                name,
                address: address || '',
                category: category || ''
              });
            }
          } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞:', e);
          }
        });
        
        return results;
      });
      
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${searchResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–∞–¥–µ–ª –∫–ª—É–±—ã
      const padelClubs = searchResults.filter(r => 
        r.name.toLowerCase().includes('–ø–∞–¥–µ–ª') || 
        r.name.toLowerCase().includes('padel') ||
        r.category.toLowerCase().includes('–ø–∞–¥–µ–ª')
      );
      
      console.log(`üéæ –ò–∑ –Ω–∏—Ö –ø–∞–¥–µ–ª –∫–ª—É–±–æ–≤: ${padelClubs.length}`);
      
      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—É–±–∞ –ø–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      for (const club of padelClubs.slice(0, 5)) { // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è —Ç–µ—Å—Ç–∞
        console.log(`\n  üìç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${club.name}`);
        
        // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–ª—É–±
        await page.evaluate((index) => {
          const items = document.querySelectorAll('.search-snippet-view');
          if (items[index]) {
            items[index].click();
          }
        }, club.index);
        
        await this.delay(3000);
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ URL
        const currentUrl = page.url();
        const coordMatch = currentUrl.match(/ll=([\d.]+)%2C([\d.]+)/);
        let latitude = null, longitude = null;
        
        if (coordMatch) {
          longitude = parseFloat(coordMatch[1]);
          latitude = parseFloat(coordMatch[2]);
          console.log(`     ‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${latitude}, ${longitude}`);
        } else {
          console.log(`     ‚ö†Ô∏è  –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        const details = await page.evaluate(() => {
          const card = document.querySelector('.business-card-view');
          if (!card) return {};
          
          // –¢–µ–ª–µ—Ñ–æ–Ω—ã
          const phoneElements = card.querySelectorAll('.card-phones-view__phone-number');
          const phones = Array.from(phoneElements).map(el => el.textContent.trim());
          
          // –°–∞–π—Ç
          const websiteElement = card.querySelector('.business-urls-view__link');
          const website = websiteElement?.href;
          
          // –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
          const hoursElements = card.querySelectorAll('.business-working-hours-view__item');
          const workingHours = [];
          hoursElements.forEach(item => {
            const day = item.querySelector('.business-working-hours-view__day')?.textContent;
            const hours = item.querySelector('.business-working-hours-view__time')?.textContent;
            if (day && hours) workingHours.push(`${day}: ${hours}`);
          });
          
          // –†–µ–π—Ç–∏–Ω–≥
          const ratingElement = card.querySelector('.business-summary-rating-badge-view__rating');
          const rating = ratingElement?.textContent;
          
          return {
            phone: phones[0] || '',
            website: website || '',
            workingHours: workingHours.join(', '),
            rating: rating || ''
          };
        });
        
        clubs.push({
          name: club.name,
          address: club.address,
          latitude,
          longitude,
          phone: details.phone,
          website: details.website,
          workingHours: details.workingHours,
          rating: details.rating,
          city: '–ú–æ—Å–∫–≤–∞',
          region: '–ú–æ—Å–∫–≤–∞',
          sports: ['padel'],
          source: 'Yandex.Maps',
          parsedAt: new Date().toISOString()
        });
        
        console.log(`     üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${details.phone || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
        console.log(`     üåê –°–∞–π—Ç: ${details.website || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
      await page.close();
    }
    
    return clubs;
  }

  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async saveResults(clubs) {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    
    // JSON —Ñ–∞–π–ª
    const jsonPath = path.join(this.outputDir, `test-moscow-${timestamp}.json`);
    await fs.writeFile(jsonPath, JSON.stringify(clubs, null, 2));
    
    console.log(`\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:`);
    console.log(`   ${jsonPath}`);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –í—Å–µ–≥–æ –∫–ª—É–±–æ–≤: ${clubs.length}`);
    console.log(`   –° –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: ${clubs.filter(c => c.latitude && c.longitude).length}`);
    console.log(`   –° —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏: ${clubs.filter(c => c.phone).length}`);
    console.log(`   –° —Å–∞–π—Ç–∞–º–∏: ${clubs.filter(c => c.website).length}`);
  }

  async close() {
    if (this.browser) {
      await this.browser.close();
    }
  }

  async run() {
    try {
      console.log('üéæ –¢–ï–°–¢–û–í–´–ô –ü–ê–†–°–ï–† –ü–ê–î–ï–õ –ö–õ–£–ë–û–í');
      console.log('=====================================');
      console.log('üìç –ì–æ—Ä–æ–¥: –ú–æ—Å–∫–≤–∞\n');
      
      await this.init();
      const clubs = await this.parseYandexMoscow();
      await this.saveResults(clubs);
      
      console.log('\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!');
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    } finally {
      await this.close();
    }
  }
}

// –ó–∞–ø—É—Å–∫
const parser = new PadelTestParser();
parser.run().catch(console.error);