#!/usr/bin/env node

/**
 * –ü–∞—Ä—Å–µ—Ä –ø–∞–¥–µ–ª –∫–ª—É–±–æ–≤ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å –ì–µ–æ—Å–∞–¥–∂–µ—Å—Ç API
 * –ò—â–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö
 */

import axios from 'axios';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.join(__dirname, '.env') });

/**
 * –ü–æ–∏—Å–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å –ì–µ–æ—Å–∞–¥–∂–µ—Å—Ç
 */
async function searchYandexGeosuggest(query, city, apiKey) {
  if (!apiKey) {
    throw new Error('–Ø–Ω–¥–µ–∫—Å –ì–µ–æ—Å–∞–¥–∂–µ—Å—Ç API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }

  try {
    const url = 'https://suggest-maps.yandex.ru/v1/suggest';
    
    const response = await axios.get(url, {
      params: {
        apikey: apiKey,
        text: query,
        ll: `${city.center.lng},${city.center.lat}`, // —Ü–µ–Ω—Ç—Ä –ø–æ–∏—Å–∫–∞: –¥–æ–ª–≥–æ—Ç–∞,—à–∏—Ä–æ—Ç–∞
        spn: '0.3,0.3', // —Ä–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ (–æ–∫–æ–ª–æ 30–∫–º)
        bbox: city.bbox, // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º bbox
        types: 'biz',
        results: 20,
        lang: 'ru_RU',
        print_address: 1,
        strict_bounds: 1, // —Å—Ç—Ä–æ–≥–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º
        attrs: 'uri' // —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π –∞—Ç—Ä–∏–±—É—Ç
      },
      headers: {
        'Accept': 'application/json'
      }
    });

    if (response.data && response.data.results) {
      return response.data.results.map(item => {
        // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –≤—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é
        if (response.data.results.indexOf(item) === 0) {
          console.log('       üîç DEBUG –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç:', JSON.stringify(item, null, 2));
        }
        
        return {
          title: item.title?.text || '',
          subtitle: item.subtitle?.text || '',
          address: item.address?.formatted_address || '',
          tags: item.tags || [],
          distance: item.distance?.value || null,
          uri: item.uri || '',
          type: item.type || '',
          // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
          phones: item.phones || [],
          hours: item.hours || null,
          website: item.website || null,
          rubrics: item.rubrics || [],
          description: item.description || null
        };
      });
    }

    return [];
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ì–µ–æ—Å–∞–¥–∂–µ—Å—Ç API: ${error.message}`);
    if (error.response) {
      console.error('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.data);
    }
    return [];
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å –ì–µ–æ–∫–æ–¥–µ—Ä
 */
async function getCoordinatesFromGeocoder(address, apiKey) {
  if (!apiKey || !address) {
    return null;
  }

  try {
    const url = 'https://geocode-maps.yandex.ru/1.x/';
    const response = await axios.get(url, {
      params: {
        apikey: apiKey,
        geocode: address,
        format: 'json',
        results: 1,
        lang: 'ru_RU'
      }
    });

    const geoObject = response.data?.response?.GeoObjectCollection?.featureMember?.[0]?.GeoObject;
    
    if (geoObject) {
      const [lng, lat] = geoObject.Point.pos.split(' ').map(parseFloat);
      
      return {
        latitude: lat,
        longitude: lng,
        formattedAddress: geoObject.metaDataProperty.GeocoderMetaData.text,
        precision: geoObject.metaDataProperty.GeocoderMetaData.precision
      };
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
  }

  return null;
}

/**
 * –ì–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å –∏—Ö bbox (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
 * –ü–æ–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –ö–∞–∑–∞–Ω—å—é
 */
const cities = [
  {
    name: '–ö–∞–∑–∞–Ω—å',
    bbox: '48.802752,55.625578~49.448442,55.913057',
    center: { lat: 55.796127, lng: 49.106405 }
  }
  // –î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞:
  // {
  //   name: '–ú–æ—Å–∫–≤–∞',
  //   bbox: '36.803267,55.142221~38.234218,56.021276',
  //   center: { lat: 55.755826, lng: 37.617300 }
  // },
  // {
  //   name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
  //   bbox: '29.438891,59.684476~31.261872,60.241194',
  //   center: { lat: 59.931226, lng: 30.359909 }
  // }
];

/**
 * –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞–¥–µ–ª –∫–ª—É–±–æ–≤
 */
const searchQueries = [
  '–ø–∞–¥–µ–ª',
  'padel',
  '–ø–∞–¥–µ–ª –∫–ª—É–±',
  'padel club',
  '–ø–∞–¥–µ–ª –∫–æ—Ä—Ç',
  '—Ç–µ–Ω–Ω–∏—Å –ø–∞–¥–µ–ª',
  '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–ª—É–± –ø–∞–¥–µ–ª'
];

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
async function parsePadelClubsFromYandex() {
  console.log('üéæ –ü–∞—Ä—Å–∏–Ω–≥ –ø–∞–¥–µ–ª –∫–ª—É–±–æ–≤ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å –ì–µ–æ—Å–∞–¥–∂–µ—Å—Ç...\n');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
  const GEOSUGGEST_KEY = process.env.YANDEX_GEOSUGGEST_API_KEY;
  const GEOCODER_KEY = process.env.YANDEX_GEOCODER_API_KEY;
  const DADATA_KEY = process.env.DADATA_API_KEY;
  const DADATA_SECRET = process.env.DADATA_SECRET;

  if (!GEOSUGGEST_KEY) {
    console.error('‚ùå –Ø–Ω–¥–µ–∫—Å –ì–µ–æ—Å–∞–¥–∂–µ—Å—Ç API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env');
    return;
  }

  console.log('üìã –°—Ç–∞—Ç—É—Å API –∫–ª—é—á–µ–π:');
  console.log(`  –ì–µ–æ—Å–∞–¥–∂–µ—Å—Ç: ${GEOSUGGEST_KEY ? '‚úÖ' : '‚ùå'}`);
  console.log(`  –ì–µ–æ–∫–æ–¥–µ—Ä: ${GEOCODER_KEY ? '‚úÖ' : '‚ùå'}`);
  console.log(`  DaData: ${DADATA_KEY ? '‚úÖ' : '‚ùå'}`);
  console.log('');

  const allClubs = [];
  const uniqueClubs = new Map(); // –î–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é+–∞–¥—Ä–µ—Å—É

  // –ü–æ–∏—Å–∫ –ø–æ –∫–∞–∂–¥–æ–º—É –≥–æ—Ä–æ–¥—É
  for (const city of cities) {
    console.log(`\nüèôÔ∏è  ${city.name}`);
    console.log('‚îÄ'.repeat(50));

    let cityClubsCount = 0;

    // –ü–æ–∏—Å–∫ –ø–æ –∫–∞–∂–¥–æ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
    for (const query of searchQueries) {
      console.log(`  üîç –ü–æ–∏—Å–∫: "${query}"`);
      
      const results = await searchYandexGeosuggest(
        query,
        city,
        GEOSUGGEST_KEY
      );

      if (results.length > 0) {
        console.log(`     –ù–∞–π–¥–µ–Ω–æ: ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for (const result of results) {
          // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
          if (results.indexOf(result) < 3) {
            console.log(`       DEBUG: "${result.title}" | –ê–¥—Ä–µ—Å: "${result.address}" | Subtitle: "${result.subtitle}"`);
          }
          
          // –†–∞–∑ –º—ã —É–∂–µ –æ–≥—Ä–∞–Ω–∏—á–∏–ª–∏ –ø–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ - –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –ö–∞–∑–∞–Ω–∏
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç
          const isRelevant = 
            result.title.toLowerCase().includes('–ø–∞–¥–µ–ª') ||
            result.title.toLowerCase().includes('padel') ||
            result.title.toLowerCase().includes('–∞—Ä—Ç–µ–Ω') || // –ê–†–¢–ï–ù - –∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞–¥–µ–ª –∫–ª—É–±
            result.title.toLowerCase().includes('—Ç–µ–Ω–Ω–∏—Å') ||
            result.title.toLowerCase().includes('—Å–ø–æ—Ä—Ç') ||
            result.subtitle?.toLowerCase().includes('–ø–∞–¥–µ–ª-–∫–ª—É–±') || // –ø—Ä–æ–≤–µ—Ä—è–µ–º subtitle
            result.tags.some(tag => 
              tag.includes('—Å–ø–æ—Ä—Ç') || 
              tag.includes('—Ñ–∏—Ç–Ω–µ—Å') || 
              tag.includes('–ø–∞–¥–µ–ª') ||
              tag.includes('—Ç–µ–Ω–Ω–∏—Å')
            );

          if (isRelevant) {
            const clubKey = `${result.title}_${result.address}`;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            if (!uniqueClubs.has(clubKey)) {
              const club = {
                name: result.title,
                city: city.name,
                address: result.address || `${city.name}, ${result.subtitle}`,
                tags: result.tags,
                uri: result.uri,
                searchQuery: query,
                coordinates: null,
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                phones: result.phones || [],
                hours: result.hours || null,
                website: result.website || null,
                rubrics: result.rubrics || [],
                description: result.subtitle || '' // subtitle —á–∞—Å—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ
              };

              // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å –≥–µ–æ–∫–æ–¥–µ—Ä
              if (GEOCODER_KEY && club.address) {
                // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –∫ –∞–¥—Ä–µ—Å—É –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
                const fullAddress = club.address.includes(city.name) 
                  ? club.address 
                  : `${city.name}, ${club.address}`;
                
                const coords = await getCoordinatesFromGeocoder(
                  fullAddress,
                  GEOCODER_KEY
                );
                
                if (coords) {
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≥–æ—Ä–æ–¥–∞
                  const [minLng, minLat, maxLng, maxLat] = city.bbox.split(/[,~]/).map(Number);
                  const isInCity = 
                    coords.latitude >= minLat && 
                    coords.latitude <= maxLat &&
                    coords.longitude >= minLng && 
                    coords.longitude <= maxLng;
                  
                  if (isInCity) {
                    club.coordinates = {
                      latitude: coords.latitude,
                      longitude: coords.longitude
                    };
                  } else {
                    console.log(`        ‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü –≥–æ—Ä–æ–¥–∞: ${coords.latitude}, ${coords.longitude}`);
                  }
                }
              }

              uniqueClubs.set(clubKey, club);
              cityClubsCount++;
              
              console.log(`     ‚úÖ ${result.title}`);
              if (result.subtitle) {
                console.log(`        üìç ${result.subtitle}`);
              }
            }
          }
        }
      }

      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 500));
    }

    console.log(`  üìä –ò—Ç–æ–≥–æ –≤ ${city.name}: ${cityClubsCount} –∫–ª—É–±–æ–≤`);
  }

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Map –≤ –º–∞—Å—Å–∏–≤
  const finalClubs = Array.from(uniqueClubs.values());

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const timestamp = new Date().toISOString().slice(0, 10);
  const outputDir = path.join(__dirname, '..', 'padel-data-yandex');
  const outputFile = path.join(outputDir, `yandex-padel-clubs-${timestamp}.json`);

  await fs.mkdir(outputDir, { recursive: true });
  await fs.writeFile(outputFile, JSON.stringify(finalClubs, null, 2), 'utf8');

  // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log('‚îÄ'.repeat(50));
  console.log(`–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—É–±–æ–≤: ${finalClubs.length}`);
  console.log(`–° –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: ${finalClubs.filter(c => c.coordinates).length}`);
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º
  const citiesStats = {};
  finalClubs.forEach(club => {
    if (!citiesStats[club.city]) {
      citiesStats[club.city] = 0;
    }
    citiesStats[club.city]++;
  });

  console.log('\nüìç –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–æ–¥–∞–º:');
  Object.entries(citiesStats)
    .sort((a, b) => b[1] - a[1])
    .forEach(([city, count]) => {
      console.log(`  ${city}: ${count} –∫–ª—É–±–æ–≤`);
    });

  console.log(`\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${outputFile}`);

  // –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—É–±–æ–≤
  console.log('\nüèÜ –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—É–±–æ–≤:');
  console.log('‚îÄ'.repeat(50));
  finalClubs.slice(0, 5).forEach(club => {
    console.log(`\n${club.name}`);
    console.log(`  üìç ${club.address}`);
    if (club.coordinates) {
      console.log(`  üéØ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${club.coordinates.latitude}, ${club.coordinates.longitude}`);
    }
    if (club.tags.length > 0) {
      console.log(`  üè∑Ô∏è  –¢–µ–≥–∏: ${club.tags.join(', ')}`);
    }
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
parsePadelClubsFromYandex().catch(console.error);