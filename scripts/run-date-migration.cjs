#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞—Ç
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/run-date-migration.js [–∫–æ–º–∞–Ω–¥–∞]
 * 
 * –ö–æ–º–∞–Ω–¥—ã:
 * - check: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç (dry run)
 * - run: –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é
 * - status: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏
 */

const admin = require('firebase-admin')

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º default credentials
// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑: firebase login
if (!admin.apps.length) {
  admin.initializeApp({
    projectId: 'sports-booking-app-1d7e5'
  })
}

const db = admin.firestore()

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
}

function log(message, color = 'reset') {
  console.log(colors[color] + message + colors.reset)
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∏–ø—ã –¥–∞—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
 */
async function analyzeCollection(collectionName) {
  log(`\nüìä Analyzing collection: ${collectionName}`, 'cyan')
  
  const snapshot = await db.collection(collectionName).limit(10).get()
  
  if (snapshot.empty) {
    log(`  ‚ö†Ô∏è  Collection is empty`, 'yellow')
    return
  }

  const dateFields = new Map()
  
  snapshot.forEach(doc => {
    const data = doc.data()
    
    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –ø–æ–ª—è —Å –¥–∞—Ç–∞–º–∏
    function findDates(obj, path = '') {
      for (const [key, value] of Object.entries(obj)) {
        const fullPath = path ? `${path}.${key}` : key
        
        if (value === null || value === undefined) continue
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
        if (value instanceof admin.firestore.Timestamp) {
          if (!dateFields.has(fullPath)) dateFields.set(fullPath, new Set())
          dateFields.get(fullPath).add('Timestamp')
        } else if (value?.toDate && typeof value.toDate === 'function') {
          if (!dateFields.has(fullPath)) dateFields.set(fullPath, new Set())
          dateFields.get(fullPath).add('Timestamp-like')
        } else if (value?.seconds !== undefined) {
          if (!dateFields.has(fullPath)) dateFields.set(fullPath, new Set())
          dateFields.get(fullPath).add('Timestamp object')
        } else if (value instanceof Date) {
          if (!dateFields.has(fullPath)) dateFields.set(fullPath, new Set())
          dateFields.get(fullPath).add('Date')
        } else if (typeof value === 'string' && value.match(/^\d{4}-\d{2}-\d{2}/)) {
          if (!dateFields.has(fullPath)) dateFields.set(fullPath, new Set())
          dateFields.get(fullPath).add('String (yyyy-MM-dd)')
        } else if (typeof value === 'string' && !isNaN(Date.parse(value)) && value.includes('T')) {
          if (!dateFields.has(fullPath)) dateFields.set(fullPath, new Set())
          dateFields.get(fullPath).add('String (ISO)')
        } else if (typeof value === 'number' && value > 1000000000000) { // Likely timestamp
          if (!dateFields.has(fullPath)) dateFields.set(fullPath, new Set())
          dateFields.get(fullPath).add('Number (timestamp)')
        } else if (typeof value === 'object' && !Array.isArray(value)) {
          // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
          findDates(value, fullPath)
        }
      }
    }
    
    findDates(data)
  })
  
  if (dateFields.size === 0) {
    log(`  ‚ÑπÔ∏è  No date fields found`, 'blue')
  } else {
    log(`  üìÖ Date fields found:`, 'green')
    for (const [field, types] of dateFields) {
      const typesList = Array.from(types).join(', ')
      const icon = types.size > 1 ? '‚ö†Ô∏è ' : '‚úÖ '
      log(`    ${icon}${field}: ${typesList}`, types.size > 1 ? 'yellow' : 'green')
    }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
 */
async function checkAllCollections() {
  log('\nüîç Checking date formats in all collections...', 'bright')
  
  const collections = [
    'bookings',
    'venues', 
    'subscriptions',
    'invoices',
    'payments',
    'trainers',
    'admins',
    'customers',
    'courts',
    'openGames'
  ]
  
  for (const collection of collections) {
    try {
      await analyzeCollection(collection)
    } catch (error) {
      log(`  ‚ùå Error analyzing ${collection}: ${error.message}`, 'red')
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é
 */
async function runMigration() {
  log('\nüöÄ Starting date format unification migration...', 'bright')
  log('‚ö†Ô∏è  This will modify your database. Make sure you have a backup!', 'yellow')
  
  // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  const readline = require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
  })
  
  await new Promise(resolve => {
    readline.question('\nType "yes" to continue: ', answer => {
      readline.close()
      if (answer.toLowerCase() !== 'yes') {
        log('Migration cancelled', 'yellow')
        process.exit(0)
      }
      resolve()
    })
  })
  
  // –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
  log('\nüì¶ Compiling migration script...', 'blue')
  const { execSync } = require('child_process')
  
  try {
    execSync('cd functions && npm run build', { stdio: 'inherit' })
    log('‚úÖ Compilation successful', 'green')
    
    log('\nüèÉ Running migration...', 'blue')
    execSync('cd functions && node lib/migrations/unifyAllDateFormats.js run', { stdio: 'inherit' })
    
    log('\n‚úÖ Migration completed successfully!', 'green')
  } catch (error) {
    log(`\n‚ùå Migration failed: ${error.message}`, 'red')
    process.exit(1)
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏
 */
async function checkMigrationStatus() {
  log('\nüìä Checking migration status...', 'cyan')
  
  try {
    const migrationDoc = await db.collection('migrations').doc('unifyAllDateFormats').get()
    
    if (migrationDoc.exists) {
      const data = migrationDoc.data()
      log('\n‚úÖ Migration has been executed', 'green')
      log(`  Status: ${data.status}`, 'blue')
      log(`  Executed at: ${data.executedAt?.toDate?.() || data.executedAt}`, 'blue')
      log(`  Description: ${data.description}`, 'blue')
    } else {
      log('\n‚ö†Ô∏è  Migration has not been executed yet', 'yellow')
    }
  } catch (error) {
    log(`\n‚ùå Error checking status: ${error.message}`, 'red')
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  const command = process.argv[2]
  
  log('üóÑÔ∏è  Date Format Unification Tool', 'bright')
  log('================================\n', 'bright')
  
  switch (command) {
    case 'check':
      await checkAllCollections()
      break
      
    case 'run':
      await runMigration()
      break
      
    case 'status':
      await checkMigrationStatus()
      break
      
    default:
      log('Usage:', 'cyan')
      log('  node scripts/run-date-migration.js check   - Analyze current date formats')
      log('  node scripts/run-date-migration.js run     - Execute the migration')
      log('  node scripts/run-date-migration.js status  - Check migration status')
      log('\n‚ÑπÔ∏è  Start with "check" to see current state', 'blue')
  }
  
  log('\n‚ú® Done!', 'green')
  process.exit(0)
}

// –ó–∞–ø—É—Å–∫
main().catch(error => {
  log(`\n‚ùå Fatal error: ${error.message}`, 'red')
  console.error(error)
  process.exit(1)
})