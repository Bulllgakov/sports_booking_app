import { initializeApp } from 'firebase/app';
import { 
  getFirestore, 
  collection, 
  getDocs, 
  updateDoc, 
  doc, 
  query, 
  where,
  Timestamp,
  writeBatch
} from 'firebase/firestore';

// Firebase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const firebaseConfig = {
  apiKey: "AIzaSyCPNy9b3FYNz5i_aiJcJ9BkvZKoQfQu-sA",
  authDomain: "sports-booking-app-1d7e5.firebaseapp.com",
  projectId: "sports-booking-app-1d7e5",
  storageBucket: "sports-booking-app-1d7e5.appspot.com",
  messagingSenderId: "648540980109",
  appId: "1:648540980109:web:f61c8fd716e0f76c3de0ea"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

async function analyzeAndFixBookings() {
  console.log('üîç –ê–Ω–∞–ª–∏–∑ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π...\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const bookingsSnapshot = await getDocs(collection(db, 'bookings'));
    console.log(`–í—Å–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: ${bookingsSnapshot.size}\n`);

    const stats = {
      total: 0,
      withPaymentStatus: 0,
      withoutPaymentStatus: 0,
      awaitingPayment: 0,
      paid: 0,
      onlinePayment: 0,
      cancelled: 0,
      refunded: 0,
      error: 0,
      expired: 0,
      notRequired: 0,
      fixed: 0,
      needsFix: []
    };

    let batch = writeBatch(db);
    let batchCount = 0;
    const maxBatchSize = 400; // Firebase –ª–∏–º–∏—Ç - 500, –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å

    for (const docSnapshot of bookingsSnapshot.docs) {
      const booking = docSnapshot.data();
      const bookingId = docSnapshot.id;
      stats.total++;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ paymentStatus
      if (booking.paymentStatus) {
        stats.withPaymentStatus++;
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ —Ç–∏–ø–∞–º
        switch (booking.paymentStatus) {
          case 'awaiting_payment':
            stats.awaitingPayment++;
            break;
          case 'paid':
            stats.paid++;
            break;
          case 'online_payment':
            stats.onlinePayment++;
            break;
          case 'cancelled':
            stats.cancelled++;
            break;
          case 'refunded':
            stats.refunded++;
            break;
          case 'error':
            stats.error++;
            break;
          case 'expired':
            stats.expired++;
            break;
          case 'not_required':
            stats.notRequired++;
            break;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É status –∏ paymentStatus
        if (booking.status === 'confirmed' && 
            booking.paymentStatus !== 'paid' && 
            booking.paymentStatus !== 'online_payment' &&
            booking.paymentStatus !== 'not_required') {
          console.log(`‚ö†Ô∏è  –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ ${bookingId}:`);
          console.log(`   Status: ${booking.status}, PaymentStatus: ${booking.paymentStatus}`);
          console.log(`   ‚Üí –ò—Å–ø—Ä–∞–≤–ª—è–µ–º paymentStatus –Ω–∞ 'paid'`);
          
          batch.update(doc(db, 'bookings', bookingId), {
            paymentStatus: 'paid',
            updatedAt: Timestamp.now()
          });
          stats.fixed++;
          stats.needsFix.push({ id: bookingId, reason: 'status-mismatch' });
          batchCount++;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –Ω–µ–≤–µ—Ä–Ω—ã–º paymentStatus
        if (booking.status === 'cancelled' && 
            booking.paymentStatus === 'awaiting_payment') {
          console.log(`‚ö†Ô∏è  –û—Ç–º–µ–Ω–µ–Ω–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –æ–ø–ª–∞—Ç—ã ${bookingId}`);
          console.log(`   ‚Üí –ò—Å–ø—Ä–∞–≤–ª—è–µ–º paymentStatus –Ω–∞ 'cancelled'`);
          
          batch.update(doc(db, 'bookings', bookingId), {
            paymentStatus: 'cancelled',
            updatedAt: Timestamp.now()
          });
          stats.fixed++;
          stats.needsFix.push({ id: bookingId, reason: 'cancelled-awaiting' });
          batchCount++;
        }
      } else {
        stats.withoutPaymentStatus++;
        
        // –î–æ–±–∞–≤–ª—è–µ–º paymentStatus –Ω–∞ –æ—Å–Ω–æ–≤–µ status
        let newPaymentStatus = 'awaiting_payment';
        
        if (booking.status === 'confirmed') {
          // –ï—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ, —Å—á–∏—Ç–∞–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º
          newPaymentStatus = 'paid';
        } else if (booking.status === 'cancelled') {
          // –ï—Å–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ
          newPaymentStatus = 'cancelled';
        } else if (booking.status === 'pending') {
          // –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–≤–Ω–æ—Å—Ç—å
          const createdAt = booking.createdAt?.toDate ? booking.createdAt.toDate() : new Date(booking.createdAt);
          const now = new Date();
          const diffInHours = (now - createdAt) / (1000 * 60 * 60);
          
          if (diffInHours > 24) {
            // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —Å—É—Ç–æ–∫ - —Å—á–∏—Ç–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–º
            newPaymentStatus = 'expired';
          } else {
            newPaymentStatus = 'awaiting_payment';
          }
        }

        console.log(`üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ paymentStatus –¥–ª—è ${bookingId}:`);
        console.log(`   Status: ${booking.status || '–Ω–µ—Ç'} ‚Üí PaymentStatus: ${newPaymentStatus}`);
        
        batch.update(doc(db, 'bookings', bookingId), {
          paymentStatus: newPaymentStatus,
          updatedAt: Timestamp.now()
        });
        
        stats.fixed++;
        stats.needsFix.push({ id: bookingId, reason: 'missing-payment-status' });
        batchCount++;
      }

      // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ batch, –≤—ã–ø–æ–ª–Ω—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
      if (batchCount >= maxBatchSize) {
        await batch.commit();
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${batchCount} –∑–∞–ø–∏—Å–µ–π`);
        batchCount = 0;
        batch = writeBatch(db); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π batch
      }
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (batchCount > 0) {
      await batch.commit();
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${batchCount} –∑–∞–ø–∏—Å–µ–π`);
    }

    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log(`–í—Å–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: ${stats.total}`);
    console.log(`–° paymentStatus: ${stats.withPaymentStatus}`);
    console.log(`–ë–µ–∑ paymentStatus: ${stats.withoutPaymentStatus}`);
    console.log('\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –æ–ø–ª–∞—Ç—ã:');
    console.log(`  –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã: ${stats.awaitingPayment}`);
    console.log(`  –û–ø–ª–∞—á–µ–Ω–æ: ${stats.paid}`);
    console.log(`  –û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞: ${stats.onlinePayment}`);
    console.log(`  –û—Ç–º–µ–Ω–µ–Ω–æ: ${stats.cancelled}`);
    console.log(`  –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ: ${stats.refunded}`);
    console.log(`  –û—à–∏–±–∫–∞: ${stats.error}`);
    console.log(`  –ò—Å—Ç–µ–∫–ª–æ: ${stats.expired}`);
    console.log(`  –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${stats.notRequired}`);
    console.log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ' + stats.fixed);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (stats.fixed > 0) {
      console.log('\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
      const q = query(collection(db, 'bookings'), where('paymentStatus', '==', null));
      const updatedSnapshot = await getDocs(q);
      console.log(`–û—Å—Ç–∞–ª–æ—Å—å –±–µ–∑ paymentStatus: ${updatedSnapshot.size}`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —Å–ª–æ—Ç–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
async function checkTodaySlots() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —Å–ª–æ—Ç–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ –∏–∑-–∑–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤)
    const bookingsSnapshot = await getDocs(collection(db, 'bookings'));
    
    const todayBookings = [];
    const todayDateStr = today.toISOString().split('T')[0];
    
    bookingsSnapshot.forEach(docSnapshot => {
      const booking = docSnapshot.data();
      const bookingDate = booking.date;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
      let dateStr = '';
      if (typeof bookingDate === 'string') {
        dateStr = bookingDate;
      } else if (bookingDate?.toDate) {
        dateStr = bookingDate.toDate().toISOString().split('T')[0];
      } else if (bookingDate?.seconds) {
        dateStr = new Date(bookingDate.seconds * 1000).toISOString().split('T')[0];
      }
      
      if (dateStr === todayDateStr) {
        todayBookings.push({
          id: docSnapshot.id,
          ...booking
        });
      }
    });
    
    console.log(`–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: ${todayBookings.length}\n`);
    
    const occupyingSlots = [];
    const freeSlots = [];
    
    todayBookings.forEach(booking => {
      const status = booking.status || 'pending';
      const paymentStatus = booking.paymentStatus || 'awaiting_payment';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ª–æ–≥–∏–∫–µ –∏–∑ –¢–ó
      const occupiesSlot = 
        status !== 'cancelled' && 
        paymentStatus !== 'cancelled' && 
        paymentStatus !== 'refunded' &&
        paymentStatus !== 'error' &&
        (status === 'confirmed' || status === 'pending' ||
         paymentStatus === 'paid' || paymentStatus === 'online_payment' ||
         paymentStatus === 'awaiting_payment');
      
      const slotInfo = {
        id: booking.id,
        courtName: booking.courtName,
        time: booking.startTime || booking.time,
        endTime: booking.endTime,
        status: status,
        paymentStatus: paymentStatus,
        customerName: booking.customerName
      };
      
      if (occupiesSlot) {
        occupyingSlots.push(slotInfo);
      } else {
        freeSlots.push(slotInfo);
      }
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    occupyingSlots.sort((a, b) => (a.time || '').localeCompare(b.time || ''));
    freeSlots.sort((a, b) => (a.time || '').localeCompare(b.time || ''));
    
    if (occupyingSlots.length > 0) {
      console.log('üìç –°–ª–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ó–ê–ù–ò–ú–ê–Æ–¢ –∫–æ—Ä—Ç:');
      occupyingSlots.forEach(slot => {
        console.log(`  ${slot.time}-${slot.endTime} | ${slot.courtName} | ${slot.customerName}`);
        console.log(`    Status: ${slot.status} | Payment: ${slot.paymentStatus}`);
      });
    }
    
    if (freeSlots.length > 0) {
      console.log('\n‚úÖ –°–ª–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –∑–∞–Ω–∏–º–∞—é—Ç –∫–æ—Ä—Ç:');
      freeSlots.forEach(slot => {
        console.log(`  ${slot.time}-${slot.endTime} | ${slot.courtName} | ${slot.customerName}`);
        console.log(`    Status: ${slot.status} | Payment: ${slot.paymentStatus}`);
      });
    }
    
    if (occupyingSlots.length === 0 && freeSlots.length === 0) {
      console.log('–ù–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ª–æ—Ç–æ–≤:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π\n');
  console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Firebase...\n');
  
  await analyzeAndFixBookings();
  await checkTodaySlots();
  
  console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
  process.exit(0);
}

main().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});