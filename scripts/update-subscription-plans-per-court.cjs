const admin = require('firebase-admin');

// Initialize Firebase Admin using Application Default Credentials
// Run: export GOOGLE_APPLICATION_CREDENTIALS="path/to/serviceAccountKey.json"
admin.initializeApp({
  projectId: 'allcourt-2025'
});

const db = admin.firestore();

async function updateSubscriptionPlans() {
  try {
    // Define updated subscription plans with per-court pricing
    const plans = [
      {
        id: 'start',
        name: '–°–¢–ê–†–¢',
        price: 0,
        pricePerCourt: 0,
        currency: 'RUB',
        interval: 'month',
        active: true,
        limits: {
          maxCourts: 2,
          maxBookingsPerMonth: -1, // unlimited
          smsEmailNotifications: 0,
          customDesign: false,
          apiAccess: false,
          multiVenue: false,
          searchPriority: 0,
          abTesting: false,
          trainersModule: false,
          personalManager: false
        },
        features: [
          '–î–æ 2 –∫–æ—Ä—Ç–æ–≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ',
          '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
          '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º',
          '–û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ (—Å–≤–æ–π —ç–∫–≤–∞–π—Ä–∏–Ω–≥)',
          '–ë–µ–ª—ã–π –ª–µ–π–±–ª (–ª–æ–≥–æ—Ç–∏–ø –∫–ª—É–±–∞)',
          'Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
          '–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤',
          '–ë–∞–∑–æ–≤–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å',
          'QR-–∫–æ–¥—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π'
        ],
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp()
      },
      {
        id: 'standard',
        name: '–°–¢–ê–ù–î–ê–†–¢',
        price: 990,
        pricePerCourt: 990,
        currency: 'RUB',
        interval: 'month',
        active: true,
        limits: {
          maxCourts: -1, // unlimited
          maxBookingsPerMonth: -1, // unlimited
          smsEmailNotifications: 500, // per court
          customDesign: false,
          apiAccess: false,
          multiVenue: false,
          searchPriority: 10,
          abTesting: false,
          trainersModule: false,
          personalManager: false
        },
        features: [
          '990‚ÇΩ –∑–∞ –∫–æ—Ä—Ç –≤ –º–µ—Å—è—Ü',
          '–û—Ç 3 –∫–æ—Ä—Ç–æ–≤',
          '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
          'SMS/Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (500 —à—Ç/–º–µ—Å—è—Ü –Ω–∞ –∫–æ—Ä—Ç)',
          '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã',
          '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏ –∏ —Å–∫–∏–¥–∫–∞–º–∏',
          '–ü—Ä–æ–º–æ–∫–æ–¥—ã –∏ –∞–∫—Ü–∏–∏',
          '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è–º–∏ (Google, –Ø–Ω–¥–µ–∫—Å)',
          '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel',
          '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∏—Å–∫–µ (+10%)'
        ],
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp()
      },
      {
        id: 'pro',
        name: '–ü–†–û–§–ò',
        price: 1990,
        pricePerCourt: 1990,
        currency: 'RUB',
        interval: 'month',
        active: true,
        limits: {
          maxCourts: -1, // unlimited
          maxBookingsPerMonth: -1,
          smsEmailNotifications: -1,
          customDesign: true,
          apiAccess: true,
          multiVenue: true,
          searchPriority: 30,
          abTesting: true,
          trainersModule: true,
          personalManager: true
        },
        features: [
          '1,990‚ÇΩ –∑–∞ –∫–æ—Ä—Ç –≤ –º–µ—Å—è—Ü',
          '–û—Ç 1 –∫–æ—Ä—Ç–∞',
          'SMS/Email –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π',
          '–ë–µ–ª—ã–π –ª–µ–π–±–ª PRO (–∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –¥–∏–∑–∞–π–Ω–∞)',
          'API –¥–æ—Å—Ç—É–ø –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π',
          '–ú—É–ª—å—Ç–∏–ø–ª–æ—â–∞–¥–∫–∏ (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ç—å—é)',
          '–¢–æ–ø –≤ –ø–æ–∏—Å–∫–µ (+30% –≤–∏–¥–∏–º–æ—Å—Ç–∏)',
          'A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω',
          '–ú–æ–¥—É–ª—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –∏ –ø–∞–∫–µ—Ç–æ–≤',
          '–ú–æ–¥—É–ª—å —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è',
          '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä'
        ],
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp()
      },
      {
        id: 'premium',
        name: '–ü–†–ï–ú–ò–£–ú',
        price: -1, // –ø–æ –∑–∞–ø—Ä–æ—Å—É
        pricePerCourt: -1,
        currency: 'RUB',
        interval: 'month',
        active: true,
        limits: {
          maxCourts: -1,
          maxBookingsPerMonth: -1,
          smsEmailNotifications: -1,
          customDesign: true,
          apiAccess: true,
          multiVenue: true,
          searchPriority: 50,
          abTesting: true,
          trainersModule: true,
          personalManager: true
        },
        features: [
          '–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ü–†–û–§–ò',
          '–¢-–ë–∞–Ω–∫ –ú—É–ª—å—Ç–∏—Ä–∞—Å—á–µ—Ç—ã',
          '–ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
          '–í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä',
          'SLA –≥–∞—Ä–∞–Ω—Ç–∏–∏',
          '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π',
          '–í—ã–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä 24/7'
        ],
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp()
      }
    ];

    // Update subscription_plans collection
    console.log('Updating subscription plans to per-court pricing model...');
    for (const plan of plans) {
      await db.collection('subscription_plans').doc(plan.id).set(plan, { merge: true });
      console.log(`‚úÖ Updated plan: ${plan.name}`);
    }

    console.log('\n‚ú® Subscription plans successfully updated to per-court pricing model!');
    console.log('üìù New pricing structure:');
    console.log('  - –°–¢–ê–†–¢: –î–æ 2 –∫–æ—Ä—Ç–æ–≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ');
    console.log('  - –°–¢–ê–ù–î–ê–†–¢: 990‚ÇΩ –∑–∞ –∫–æ—Ä—Ç (–æ—Ç 3 –∫–æ—Ä—Ç–æ–≤)');
    console.log('  - –ü–†–û–§–ò: 1,990‚ÇΩ –∑–∞ –∫–æ—Ä—Ç (–æ—Ç 1 –∫–æ—Ä—Ç–∞)');
    console.log('  - –ü–†–ï–ú–ò–£–ú: –ü–æ –∑–∞–ø—Ä–æ—Å—É');
    
    process.exit(0);
  } catch (error) {
    console.error('Error updating subscription plans:', error);
    process.exit(1);
  }
}

// Run the update
updateSubscriptionPlans();