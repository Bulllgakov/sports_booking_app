import * as functions from "firebase-functions";
import * as admin from "firebase-admin";

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞—Ç –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É Firebase Timestamp
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –¥–∞—Ç—ã –≤ Timestamp
 */
export const unifyDateFormats = functions
  .region("europe-west1")
  .https.onRequest(async (req, res) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
    if (req.method !== "POST") {
      res.status(405).send("Method Not Allowed");
      return;
    }

    const db = admin.firestore();

    try {
      console.log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞—Ç...");

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      const bookingsSnapshot = await db.collection("bookings").get();
      console.log(`–í—Å–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: ${bookingsSnapshot.size}`);

      const stats = {
        total: 0,
        stringDates: 0,
        timestampDates: 0,
        converted: 0,
        errors: [] as Array<{id: string; date: any; error: string}>,
      };

      const batch = db.batch();
      let batchCount = 0;
      const maxBatchSize = 450;

      for (const doc of bookingsSnapshot.docs) {
        const booking = doc.data();
        stats.total++;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        if (typeof booking.date === "string") {
          stats.stringDates++;

          try {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ Date, –∑–∞—Ç–µ–º –≤ Timestamp
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
            const dateObj = new Date(booking.date + "T00:00:00");

            if (isNaN(dateObj.getTime())) {
              stats.errors.push({
                id: doc.id,
                date: booking.date,
                error: "Invalid date string",
              });
              continue;
            }

            const timestamp = admin.firestore.Timestamp.fromDate(dateObj);

            batch.update(doc.ref, {
              date: timestamp,
              dateString: booking.date, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
              dateUnified: true,
              dateUnifiedAt: admin.firestore.FieldValue.serverTimestamp(),
            });

            stats.converted++;
            batchCount++;

            console.log(`‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${doc.id} | ${booking.date} ‚Üí Timestamp`);

            // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ batch, –≤—ã–ø–æ–ª–Ω—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            if (batchCount >= maxBatchSize) {
              await batch.commit();
              console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–æ ${batchCount} –∑–∞–ø–∏—Å–µ–π`);
              batchCount = 0;
            }
          } catch (error) {
            stats.errors.push({
              id: doc.id,
              date: booking.date,
              error: (error as Error).message || String(error),
            });
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–ª—è ${doc.id}:`, error);
          }
        } else if (booking.date?.toDate || booking.date?.seconds) {
          // –£–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Timestamp
          stats.timestampDates++;
        }
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      if (batchCount > 0) {
        await batch.commit();
        console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${batchCount} –∑–∞–ø–∏—Å–µ–π`);
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      const response = {
        success: true,
        message: "–£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
        stats: {
          total: stats.total,
          stringDates: stats.stringDates,
          timestampDates: stats.timestampDates,
          converted: stats.converted,
          errors: stats.errors.length,
        },
        errors: stats.errors,
      };

      console.log("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:", response);
      res.json(response);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–∞—Ç:", error);
      res.status(500).json({
        success: false,
        error: (error as Error).message,
      });
    }
  });
