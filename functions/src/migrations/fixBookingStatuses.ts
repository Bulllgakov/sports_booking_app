import * as functions from "firebase-functions";
import * as admin from "firebase-admin";

/**
 * Cloud Function –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É status –∏ paymentStatus
 */
export const fixBookingStatuses = functions
  .region("europe-west1")
  .https.onRequest(async (req, res) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
    if (req.method !== "POST") {
      res.status(405).send("Method Not Allowed");
      return;
    }

    const db = admin.firestore();

    try {
      console.log("üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π...");

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      const bookingsSnapshot = await db.collection("bookings").get();
      console.log(`–í—Å–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: ${bookingsSnapshot.size}`);

      const stats = {
        total: 0,
        fixed: 0,
        confirmedWithAwaitingPayment: 0,
        pendingWithPaid: 0,
        confirmedWithError: 0,
        cancelledWithAwaitingPayment: 0,
        missingPaymentStatus: 0,
        errors: [],
      };

      const batch = db.batch();
      let batchCount = 0;
      const maxBatchSize = 450; // Firebase –ª–∏–º–∏—Ç - 500

      for (const doc of bookingsSnapshot.docs) {
        const booking = doc.data();
        stats.total++;

        let needsUpdate = false;
        const updates: any = {};

        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ paymentStatus
        if (!booking.paymentStatus) {
          stats.missingPaymentStatus++;
          needsUpdate = true;

          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º paymentStatus –Ω–∞ –æ—Å–Ω–æ–≤–µ status
          if (booking.status === "confirmed") {
            updates.paymentStatus = "paid";
          } else if (booking.status === "cancelled") {
            updates.paymentStatus = "cancelled";
          } else if (booking.status === "pending") {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–≤–Ω–æ—Å—Ç—å –¥–ª—è pending
            const createdAt = booking.createdAt?.toDate() || new Date(booking.createdAt);
            const now = new Date();
            const diffInHours = (now.getTime() - createdAt.getTime()) / (1000 * 60 * 60);

            if (diffInHours > 24) {
              updates.paymentStatus = "expired";
            } else {
              updates.paymentStatus = "awaiting_payment";
            }
          } else {
            updates.paymentStatus = "awaiting_payment";
          }

          console.log(`–î–æ–±–∞–≤–ª–µ–Ω paymentStatus –¥–ª—è ${doc.id}: ${updates.paymentStatus}`);
        }

        // 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: confirmed —Å awaiting_payment
        // –ï—Å–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ, –Ω–æ –æ–ø–ª–∞—Ç–∞ –µ—â–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è -
        // –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ pending (–æ–∂–∏–¥–∞–µ—Ç)
        if (booking.status === "confirmed" &&
            booking.paymentStatus === "awaiting_payment") {
          stats.confirmedWithAwaitingPayment++;
          needsUpdate = true;
          updates.status = "pending"; // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –∞ –Ω–µ –æ–ø–ª–∞—Ç—ã!
          console.log(
            `–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${doc.id} - status: confirmed ‚Üí pending (—Ç.–∫. paymentStatus: awaiting_payment)`
          );
        }

        // 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: cancelled —Å awaiting_payment
        if (booking.status === "cancelled" &&
            booking.paymentStatus === "awaiting_payment") {
          stats.cancelledWithAwaitingPayment++;
          needsUpdate = true;
          updates.paymentStatus = "cancelled";
          console.log(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${doc.id} - cancelled ‚Üí cancelled`);
        }

        // 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: pending —Å paid/online_payment
        // –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ —Å—Ç–∞—Ç—É—Å –µ—â–µ pending - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        if (booking.status === "pending" &&
            (booking.paymentStatus === "paid" ||
             booking.paymentStatus === "online_payment")) {
          stats.pendingWithPaid++;
          needsUpdate = true;
          updates.status = "confirmed";
          console.log(
            `–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${doc.id} - status: pending ‚Üí confirmed (—Ç.–∫. paymentStatus: ${booking.paymentStatus})`
          );
        }

        // 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: confirmed —Å cancelled/error/expired
        // –ï—Å–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ, –Ω–æ –æ–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞/–æ—à–∏–±–∫–∞ - –æ—Ç–º–µ–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        if (booking.status === "confirmed" &&
            (booking.paymentStatus === "cancelled" ||
             booking.paymentStatus === "error" ||
             booking.paymentStatus === "expired")) {
          stats.confirmedWithError++;
          needsUpdate = true;
          updates.status = "cancelled";
          console.log(
            `–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${doc.id} - status: confirmed ‚Üí cancelled (—Ç.–∫. paymentStatus: ${booking.paymentStatus})`
          );
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ batch –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if (needsUpdate) {
          updates.updatedAt = admin.firestore.FieldValue.serverTimestamp();
          batch.update(doc.ref, updates);
          stats.fixed++;
          batchCount++;

          // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ batch, –≤—ã–ø–æ–ª–Ω—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
          if (batchCount >= maxBatchSize) {
            await batch.commit();
            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${batchCount} –∑–∞–ø–∏—Å–µ–π`);
            batchCount = 0;
            // batch –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∑–∞–Ω–æ–≤–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
          }
        }
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      if (batchCount > 0) {
        await batch.commit();
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${batchCount} –∑–∞–ø–∏—Å–µ–π`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const tomorrow = new Date(today);
      tomorrow.setDate(tomorrow.getDate() + 1);

      const todayBookings = await db.collection("bookings")
        .where("date", ">=", admin.firestore.Timestamp.fromDate(today))
        .where("date", "<", admin.firestore.Timestamp.fromDate(tomorrow))
        .get();

      const todayStats = {
        total: 0,
        occupying: 0,
        free: 0,
      };

      todayBookings.forEach((doc) => {
        const booking = doc.data();
        const status = booking.status || "pending";
        const paymentStatus = booking.paymentStatus || "awaiting_payment";

        todayStats.total++;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ª–æ–≥–∏–∫–µ –∏–∑ –¢–ó
        const occupiesSlot =
          status !== "cancelled" &&
          paymentStatus !== "cancelled" &&
          paymentStatus !== "refunded" &&
          paymentStatus !== "error" &&
          (status === "confirmed" || status === "pending" ||
           paymentStatus === "paid" || paymentStatus === "online_payment" ||
           paymentStatus === "awaiting_payment");

        if (occupiesSlot) {
          todayStats.occupying++;
        } else {
          todayStats.free++;
        }
      });

      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      const response = {
        success: true,
        message: "–°—Ç–∞—Ç—É—Å—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã",
        stats: {
          total: stats.total,
          fixed: stats.fixed,
          details: {
            missingPaymentStatus: stats.missingPaymentStatus,
            confirmedWithAwaitingPayment: stats.confirmedWithAwaitingPayment,
            pendingWithPaid: stats.pendingWithPaid,
            confirmedWithError: stats.confirmedWithError,
            cancelledWithAwaitingPayment: stats.cancelledWithAwaitingPayment,
          },
        },
        todayBookings: {
          total: todayStats.total,
          occupyingSlots: todayStats.occupying,
          freeSlots: todayStats.free,
        },
      };

      console.log("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:", response);
      res.json(response);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤:", error);
      res.status(500).json({
        success: false,
        error: (error as Error).message,
      });
    }
  });
