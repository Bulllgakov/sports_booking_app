// –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Firestore –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
const { initializeApp, cert } = require('firebase-admin/app');
const { getFirestore } = require('firebase-admin/firestore');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–µ–∫—Ç–æ–º
const app = initializeApp({
  projectId: 'sports-booking-app-1d7e5'
});

const db = getFirestore();

async function cleanupBookings() {
  console.log('üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π...\n');
  
  try {
    // –ò—â–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É
    const problematicBookings = [];
    
    // 1. –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å online_payment
    const onlinePaymentQuery = await db
      .collection('bookings')
      .where('paymentStatus', '==', 'online_payment')
      .get();
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${onlinePaymentQuery.size} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å paymentStatus='online_payment'`);
    onlinePaymentQuery.forEach(doc => {
      problematicBookings.push({ id: doc.id, ...doc.data() });
    });
    
    // 2. –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç web-client
    const webClientQuery = await db
      .collection('bookings')
      .where('createdBy.userId', '==', 'web-client')
      .get();
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${webClientQuery.size} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å createdBy.userId='web-client'`);
    webClientQuery.forEach(doc => {
      if (!problematicBookings.find(b => b.id === doc.id)) {
        problematicBookings.push({ id: doc.id, ...doc.data() });
      }
    });
    
    // 3. –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å source=web
    const webSourceQuery = await db
      .collection('bookings')
      .where('source', '==', 'web')
      .get();
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${webSourceQuery.size} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å source='web'`);
    webSourceQuery.forEach(doc => {
      if (!problematicBookings.find(b => b.id === doc.id)) {
        problematicBookings.push({ id: doc.id, ...doc.data() });
      }
    });
    
    console.log(`\nüìä –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: ${problematicBookings.length}`);
    
    if (problematicBookings.length === 0) {
      console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    console.log('\nüìù –ü—Ä–∏–º–µ—Ä—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:');
    problematicBookings.slice(0, 3).forEach(booking => {
      console.log(`- ${booking.id}: ${booking.courtName || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}, ${booking.date}, ${booking.startTime || booking.time}`);
    });
    
    // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    console.log(`\n‚ö†Ô∏è  –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ ${problematicBookings.length} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.`);
    console.log('–ù–∞–∂–º–∏—Ç–µ Ctrl+C —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...');
    
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –£–¥–∞–ª—è–µ–º
    console.log('\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π...');
    let deleted = 0;
    
    for (const booking of problematicBookings) {
      try {
        await db.collection('bookings').doc(booking.id).delete();
        deleted++;
        if (deleted % 10 === 0) {
          console.log(`–£–¥–∞–ª–µ–Ω–æ ${deleted} –∏–∑ ${problematicBookings.length}...`);
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${booking.id}:`, error.message);
      }
    }
    
    console.log(`\n‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ${deleted} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π!`);
    console.log('–¢–µ–ø–µ—Ä—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤ –∞–¥–º–∏–Ω–∫–µ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å.');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
cleanupBookings()
  .then(() => process.exit(0))
  .catch(error => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });