// –ü—Ä—è–º–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Firebase Admin SDK
const admin = require('firebase-admin');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
if (!admin.apps.length) {
  admin.initializeApp();
}

const db = admin.firestore();

async function deleteWebBookings() {
  console.log('üîç –ü–æ–∏—Å–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è...\n');
  
  try {
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const queries = await Promise.all([
      db.collection('bookings')
        .where('source', '==', 'web')
        .where('paymentMethod', '==', 'online')
        .get(),
      
      db.collection('bookings')
        .where('paymentStatus', '==', 'online_payment')
        .get(),
      
      db.collection('bookings')
        .where('createdBy.userId', '==', 'web-client')
        .get()
    ]);
    
    // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID
    const bookingIds = new Set();
    
    queries.forEach((query, index) => {
      console.log(`–ó–∞–ø—Ä–æ—Å ${index + 1}: –Ω–∞–π–¥–µ–Ω–æ ${query.size} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π`);
      query.docs.forEach(doc => bookingIds.add(doc.id));
    });
    
    const totalBookings = bookingIds.size;
    console.log(`\nüìä –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∫ —É–¥–∞–ª–µ–Ω–∏—é: ${totalBookings}`);
    
    if (totalBookings === 0) {
      console.log('‚úÖ –ù–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
      return { success: true, deletedBookings: 0, deletedPayments: 0 };
    }
    
    // –£–¥–∞–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π...');
    const bookingIdsArray = Array.from(bookingIds);
    let deletedCount = 0;
    
    // –£–¥–∞–ª—è–µ–º –±–∞—Ç—á–∞–º–∏ –ø–æ 500
    for (let i = 0; i < bookingIdsArray.length; i += 500) {
      const batch = db.batch();
      const batchIds = bookingIdsArray.slice(i, i + 500);
      
      batchIds.forEach(id => {
        batch.delete(db.collection('bookings').doc(id));
      });
      
      await batch.commit();
      deletedCount += batchIds.length;
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deletedCount} –∏–∑ ${totalBookings}`);
    }
    
    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
    console.log('\nüí∞ –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π...');
    let deletedPayments = 0;
    
    for (const bookingId of bookingIdsArray) {
      const payments = await db.collection('payments')
        .where('bookingId', '==', bookingId)
        .get();
      
      if (!payments.empty) {
        const batch = db.batch();
        payments.docs.forEach(doc => {
          batch.delete(doc.ref);
          deletedPayments++;
        });
        await batch.commit();
      }
    }
    
    console.log(`\nüéâ –ì–æ—Ç–æ–≤–æ!`);
    console.log(`   –£–¥–∞–ª–µ–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: ${deletedCount}`);
    console.log(`   –£–¥–∞–ª–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${deletedPayments}`);
    
    return {
      success: true,
      deletedBookings: deletedCount,
      deletedPayments: deletedPayments,
      message: `–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ${deletedCount} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∏ ${deletedPayments} –ø–ª–∞—Ç–µ–∂–µ–π`
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    return { success: false, error: error.message };
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
deleteWebBookings()
  .then(result => {
    console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(result, null, 2));
    process.exit(0);
  })
  .catch(err => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
    process.exit(1);
  });