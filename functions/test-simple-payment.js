#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API –¢-–ë–∞–Ω–∫–∞
 * –ó–∞–ø—É—Å–∫: node test-simple-payment.js
 */

const axios = require('axios');
const crypto = require('crypto');

// –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TEST_CONFIG = {
  terminalKey: '1755339010178',  // –û–±—ã—á–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª
  password: 'D7SfdvJY5zq7fm=W',  // –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
  apiUrl: 'https://rest-api-test.tinkoff.ru/v2/'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
function generateToken(params, password) {
  const paramsWithPassword = { ...params, Password: password };
  const sortedKeys = Object.keys(paramsWithPassword).sort();
  const concatenated = sortedKeys
    .filter(key => paramsWithPassword[key] !== undefined && paramsWithPassword[key] !== null)
    .map(key => String(paramsWithPassword[key]))
    .join('');
  
  return crypto
    .createHash('sha256')
    .update(concatenated)
    .digest('hex');
}

async function testSimplePayment() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API –¢-–ë–∞–Ω–∫–∞...\n');
  console.log('üìç –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:', TEST_CONFIG.apiUrl);
  console.log('üîë Terminal Key:', TEST_CONFIG.terminalKey);
  console.log('');

  try {
    // –ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ –±–µ–∑ –ú—É–ª—å—Ç–∏—Ä–∞—Å—á–µ—Ç–æ–≤
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–ª–∞—Ç–µ–∂–∞...');
    
    const orderId = `test_${Date.now()}`;
    const amount = 100; // 100 —Ä—É–±–ª–µ–π
    
    const initData = {
      TerminalKey: TEST_CONFIG.terminalKey,
      Amount: amount * 100, // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
      OrderId: orderId,
      Description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂'
    };
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    const token = generateToken(initData, TEST_CONFIG.password);
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...');
    console.log(`   Order ID: ${orderId}`);
    console.log(`   –°—É–º–º–∞: ${amount} —Ä—É–±`);
    console.log(`   Token: ${token.substring(0, 10)}...`);
    
    const response = await axios.post(
      `${TEST_CONFIG.apiUrl}Init`,
      { ...initData, Token: token },
      {
        headers: {
          'Content-Type': 'application/json'
        },
        timeout: 10000
      }
    );
    
    if (response.data.Success) {
      console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
      console.log(`   Payment ID: ${response.data.PaymentId}`);
      console.log(`   Status: ${response.data.Status}`);
      console.log(`   Payment URL: ${response.data.PaymentURL}`);
      console.log('');
      console.log('üåê –û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã:');
      console.log(`   ${response.data.PaymentURL}`);
      
      return response.data.PaymentId;
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', response.data);
      console.error('   ErrorCode:', response.data.ErrorCode);
      console.error('   Message:', response.data.Message || response.data.Details);
      return null;
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:');
    if (error.response) {
      console.error('   –°—Ç–∞—Ç—É—Å:', error.response.status);
      console.error('   –î–∞–Ω–Ω—ã–µ:', JSON.stringify(error.response.data, null, 2));
      
      if (error.response.status === 403) {
        console.error('');
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ 403: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        console.error('–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
        console.error('1. –¢–µ—Ä–º–∏–Ω–∞–ª –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏');
        console.error('2. –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        console.error('3. IP-–∞–¥—Ä–µ—Å –Ω–µ –≤ whitelist');
        console.error('');
        console.error('–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¢-–ë–∞–Ω–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞.');
      }
    } else if (error.code === 'ECONNREFUSED') {
      console.error('   –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    } else {
      console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫
testSimplePayment().catch(console.error);