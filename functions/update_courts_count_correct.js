const admin = require('firebase-admin');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
admin.initializeApp();

const db = admin.firestore();

async function updateCourtsCount() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—É–±—ã
    const venuesSnapshot = await db.collection('venues').get();
    
    console.log(`–û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä—Ç–æ–≤ –¥–ª—è ${venuesSnapshot.size} –∫–ª—É–±–æ–≤:\n`);
    
    for (const venueDoc of venuesSnapshot.docs) {
      const venueData = venueDoc.data();
      const venueId = venueDoc.id;
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä—Ç—ã –∏–∑ –ø–æ–¥–∫–æ–ª–ª–µ–∫—Ü–∏–∏
      const courtsCollection = await db.collection('venues').doc(venueId).collection('courts').get();
      const actualCourtsCount = courtsCollection.size;
      
      console.log(`\nüìç ${venueData.name}:`);
      console.log(`  - –ù–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ç–æ–≤ –≤ –ø–æ–¥–∫–æ–ª–ª–µ–∫—Ü–∏–∏: ${actualCourtsCount}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∫–ª—É–±–∞
      const subQuery = await db.collection('subscriptions')
        .where('venueId', '==', venueId)
        .where('status', 'in', ['active', 'trial'])
        .get();
      
      if (!subQuery.empty) {
        const subDoc = subQuery.docs[0];
        const subData = subDoc.data();
        const currentCourtsCount = subData.usage?.courtsCount || 0;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä—Ç–æ–≤
        if (currentCourtsCount !== actualCourtsCount) {
          await subDoc.ref.update({
            'usage.courtsCount': actualCourtsCount,
            'usage.lastUpdated': admin.firestore.FieldValue.serverTimestamp()
          });
          
          console.log(`  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${currentCourtsCount} ‚Üí ${actualCourtsCount}`);
        } else {
          console.log(`  ‚è≠Ô∏è  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä—Ç–æ–≤ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ: ${actualCourtsCount}`);
        }
      } else {
        console.log(`  ‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }
    }
    
    console.log('\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
  } finally {
    process.exit();
  }
}

updateCourtsCount();