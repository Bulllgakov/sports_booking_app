import React, { useState, useEffect } from 'react'
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Typography,
  Box,
  Stepper,
  Step,
  StepLabel,
  StepContent,
  Paper,
  Alert,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  LinearProgress
} from '@mui/material'
import {
  SportsTennis,
  Business,
  School,
  CheckCircle,
  RadioButtonUnchecked,
  ArrowForward,
  Celebration,
  Add
} from '@mui/icons-material'
import { useNavigate } from 'react-router-dom'
import { doc, updateDoc, getDoc } from 'firebase/firestore'
import { db } from '../services/firebase'
import { useAuth } from '../contexts/AuthContext'

interface OnboardingStep {
  title: string
  description: string
  icon: React.ReactElement
  path: string
  buttonText: string
  checklist?: string[]
  completed?: boolean
}

interface OnboardingTourProps {
  forceShow?: boolean
  onClose?: () => void
}

export default function OnboardingTour({ forceShow = false, onClose }: OnboardingTourProps) {
  const navigate = useNavigate()
  const { club, admin } = useAuth()
  const [open, setOpen] = useState(false)
  const [currentStep, setCurrentStep] = useState(0)
  const [completedSteps, setCompletedSteps] = useState<number[]>([])
  const [loading, setLoading] = useState(false)

  const steps: OnboardingStep[] = [
    {
      title: 'üéæ –î–æ–±–∞–≤—å—Ç–µ –∫–æ—Ä—Ç—ã',
      description: '–≠—Ç–æ —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π —à–∞–≥! –ë–µ–∑ –∫–æ—Ä—Ç–æ–≤ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å. –î–æ–±–∞–≤—å—Ç–µ –≤—Å–µ –≤–∞—à–∏ –∫–æ—Ä—Ç—ã, —É–∫–∞–∂–∏—Ç–µ –∏—Ö —Ç–∏–ø—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.',
      icon: <SportsTennis color="primary" fontSize="large" />,
      path: '/admin/courts',
      buttonText: '–î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä—Ç—ã',
      checklist: [
        '–î–æ–±–∞–≤—å—Ç–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ—Ä—Ç—ã',
        '–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –∫–∞–∂–¥–æ–≥–æ –∫–æ—Ä—Ç–∞ (–∫—Ä—ã—Ç—ã–π/–æ—Ç–∫—Ä—ã—Ç—ã–π)',
        '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã',
        '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–Ω—ã –∑–∞ —á–∞—Å'
      ]
    },
    {
      title: 'üè¢ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã',
      description: '–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.',
      icon: <Business color="primary" fontSize="large" />,
      path: '/admin/club',
      buttonText: '–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã',
      checklist: [
        '–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
        '–î–æ–±–∞–≤—å—Ç–µ –ò–ù–ù –∏ –û–ì–†–ù',
        '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å',
        '–î–æ–±–∞–≤—å—Ç–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã'
      ]
    },
    {
      title: 'üë• –î–æ–±–∞–≤—å—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–æ–≤',
      description: '–°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ —Ü–µ–Ω–∞–º–∏.',
      icon: <School color="primary" fontSize="large" />,
      path: '/admin/trainers',
      buttonText: '–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–≤',
      checklist: [
        '–î–æ–±–∞–≤—å—Ç–µ –≤—Å–µ—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –∫–ª—É–±–∞',
        '–°–æ–∑–¥–∞–π—Ç–µ –¥–ª—è –Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ã',
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º –¥–æ—Å—Ç—É–ø—ã',
        '–¢—Ä–µ–Ω–µ—Ä—ã —Å–º–æ–≥—É—Ç —Å–∞–º–∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º'
      ]
    }
  ]

  useEffect(() => {
    if (forceShow) {
      setOpen(true)
      setCurrentStep(0)
      checkCurrentProgress() // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    } else {
      checkOnboardingStatus()
    }
  }, [club, forceShow])

  const checkCurrentProgress = async () => {
    if (!club || !admin) return
    
    try {
      const venueDoc = await getDoc(doc(db, 'venues', club.id))
      const venueData = venueDoc.data()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —à–∞–≥–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
      const completed = []
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ—Ä—Ç–æ–≤
      const courts = venueData?.courts || []
      if (courts.length > 0) {
        completed.push(0)
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
      if (venueData?.inn && venueData?.bankAccount) {
        completed.push(1)
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤
      if (venueData?.trainers && venueData.trainers.length > 0) {
        completed.push(2)
      }
      
      setCompletedSteps(completed)
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –Ω–∞ –ø–µ—Ä–≤—ã–π –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
      const nextStep = steps.findIndex((_, index) => !completed.includes(index))
      setCurrentStep(nextStep !== -1 ? nextStep : 0)
    } catch (error) {
      console.error('Error checking current progress:', error)
    }
  }
  
  const checkOnboardingStatus = async () => {
    if (!club || !admin) return

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–ª—É–±–∞ –∏ –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –∫–ª—É–±
    if (admin.role !== 'admin') return
    
    try {
      const venueDoc = await getDoc(doc(db, 'venues', club.id))
      const venueData = venueDoc.data()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ –∫–ª—É–± onboarding
      if (venueData?.onboardingCompleted) return
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—É–± —Å–æ–∑–¥–∞–Ω –Ω–µ–¥–∞–≤–Ω–æ (–≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 7 –¥–Ω–µ–π)
      const createdAt = venueData?.createdAt?.toDate()
      const daysSinceCreation = createdAt ? 
        (new Date().getTime() - createdAt.getTime()) / (1000 * 60 * 60 * 24) : 0
      
      if (daysSinceCreation <= 7 && club.status === 'pending') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —à–∞–≥–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        const completed = []
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ—Ä—Ç–æ–≤
        const courtsQuery = await getDoc(doc(db, 'venues', club.id))
        const courts = venueData?.courts || []
        if (courts.length > 0) {
          completed.push(0)
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
        if (venueData?.inn && venueData?.bankAccount) {
          completed.push(1)
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤
        if (venueData?.trainers && venueData.trainers.length > 0) {
          completed.push(2)
        }
        
        setCompletedSteps(completed)
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º onboarding —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤—Å–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        if (completed.length < steps.length) {
          setOpen(true)
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –Ω–∞ –ø–µ—Ä–≤—ã–π –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
          const nextStep = steps.findIndex((_, index) => !completed.includes(index))
          setCurrentStep(nextStep !== -1 ? nextStep : 0)
        }
      }
    } catch (error) {
      console.error('Error checking onboarding status:', error)
    }
  }

  const handleStepClick = async (stepIndex: number) => {
    const step = steps[stepIndex]
    
    // –û—Ç–º–µ—á–∞–µ–º —à–∞–≥ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π
    if (!completedSteps.includes(stepIndex)) {
      setCompletedSteps([...completedSteps, stepIndex])
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    navigate(step.path)
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥, –æ—Ç–º–µ—á–∞–µ–º onboarding –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
    if (stepIndex === steps.length - 1) {
      await completeOnboarding()
    } else {
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
      setCurrentStep(stepIndex + 1)
    }
  }

  const completeOnboarding = async () => {
    if (!club) return
    
    setLoading(true)
    try {
      await updateDoc(doc(db, 'venues', club.id), {
        onboardingCompleted: true,
        onboardingCompletedAt: new Date()
      })
      setOpen(false)
    } catch (error) {
      console.error('Error completing onboarding:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleSkip = async () => {
    if (forceShow) {
      // –ï—Å–ª–∏ –≤—ã–∑–≤–∞–ª–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏, –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º
      setOpen(false)
      onClose?.()
    } else {
      if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É? –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–µ–π –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é –ø–æ–º–æ—â–∏.')) {
        await completeOnboarding()
      }
    }
  }

  const progress = (completedSteps.length / steps.length) * 100

  return (
    <Dialog 
      open={open} 
      onClose={() => {
        // –ü–æ–∑–≤–æ–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏
        if (forceShow) {
          setOpen(false)
          onClose?.()
        }
      }}
      maxWidth="md" 
      fullWidth
      PaperProps={{
        sx: {
          borderRadius: 2,
          overflow: 'visible'
        }
      }}
    >
      <DialogTitle>
        <Box display="flex" alignItems="center" justifyContent="space-between">
          <Box display="flex" alignItems="center" gap={1}>
            <Celebration color="primary" />
            <Typography variant="h5" component="span">
              –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –í—Å–µ –ö–æ—Ä—Ç—ã!
            </Typography>
          </Box>
          <Typography variant="body2" color="text.secondary">
            –®–∞–≥ {currentStep + 1} –∏–∑ {steps.length}
          </Typography>
        </Box>
        <LinearProgress 
          variant="determinate" 
          value={progress} 
          sx={{ mt: 2, height: 8, borderRadius: 4 }}
        />
      </DialogTitle>
      
      <DialogContent>
        <Alert severity="info" sx={{ mb: 3 }}>
          –î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à –∫–ª—É–± –∑–∞ 3 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–∞. –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç!
        </Alert>
        
        <Stepper activeStep={currentStep} orientation="vertical">
          {steps.map((step, index) => (
            <Step key={index} completed={completedSteps.includes(index)}>
              <StepLabel 
                StepIconComponent={() => (
                  <Box
                    sx={{
                      width: 40,
                      height: 40,
                      borderRadius: '50%',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      bgcolor: completedSteps.includes(index) 
                        ? 'success.main' 
                        : index === currentStep 
                          ? 'primary.main' 
                          : 'grey.300',
                      color: 'white'
                    }}
                  >
                    {completedSteps.includes(index) ? (
                      <CheckCircle />
                    ) : (
                      <Typography>{index + 1}</Typography>
                    )}
                  </Box>
                )}
              >
                <Typography variant="h6">{step.title}</Typography>
              </StepLabel>
              <StepContent>
                <Paper elevation={0} sx={{ p: 3, bgcolor: 'grey.50', mb: 2 }}>
                  <Box display="flex" gap={2} mb={2}>
                    {step.icon}
                    <Box flex={1}>
                      <Typography variant="body1" paragraph>
                        {step.description}
                      </Typography>
                      
                      {step.checklist && (
                        <List dense sx={{ bgcolor: 'white', borderRadius: 1, p: 1 }}>
                          {step.checklist.map((item, idx) => (
                            <ListItem key={idx} disableGutters>
                              <ListItemIcon sx={{ minWidth: 32 }}>
                                <RadioButtonUnchecked fontSize="small" color="action" />
                              </ListItemIcon>
                              <ListItemText 
                                primary={item}
                                primaryTypographyProps={{ variant: 'body2' }}
                              />
                            </ListItem>
                          ))}
                        </List>
                      )}
                    </Box>
                  </Box>
                  
                  <Button
                    variant="contained"
                    size="large"
                    fullWidth
                    onClick={() => handleStepClick(index)}
                    endIcon={<ArrowForward />}
                    sx={{ mt: 2 }}
                  >
                    {step.buttonText}
                  </Button>
                </Paper>
              </StepContent>
            </Step>
          ))}
        </Stepper>
        
        {currentStep === steps.length - 1 && completedSteps.length === steps.length && (
          <Alert severity="success" sx={{ mt: 3 }}>
            <Typography variant="h6" gutterBottom>
              üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
            </Typography>
            <Typography variant="body2">
              –í–∞—à –∫–ª—É–± –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –¢–µ–ø–µ—Ä—å –∫–ª–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä—Ç—ã –æ–Ω–ª–∞–π–Ω.
              –ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—É.
            </Typography>
          </Alert>
        )}
      </DialogContent>
      
      <DialogActions sx={{ p: 3, pt: 0 }}>
        <Button 
          onClick={handleSkip}
          disabled={loading}
          color="inherit"
        >
          –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∑–∂–µ
        </Button>
        {completedSteps.length === steps.length && (
          <Button 
            variant="contained" 
            onClick={completeOnboarding}
            disabled={loading}
          >
            –ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É
          </Button>
        )}
      </DialogActions>
    </Dialog>
  )
}