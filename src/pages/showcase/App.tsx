import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, useParams, useNavigate } from 'react-router-dom';
import { collection, getDocs, query, where } from 'firebase/firestore';
import { db } from '../../services/firebase';
import Header from '../../components/showcase/Header';
import ClubsList from '../../components/showcase/ClubsList';
import ClubPage from '../../components/showcase/ClubPage';
import LandingSection from '../../components/showcase/LandingSection';
import Footer from '../../components/showcase/Footer';
import { Venue } from '../../types/venue';
import './App.css';

interface Sport {
  id: string;
  name: string;
  icon: string;
  color: string;
}

const SPORTS: Sport[] = [
  { id: 'all', name: '–í—Å–µ –≤–∏–¥—ã', icon: 'üèÜ', color: '#00D632' },
  { id: 'padel', name: '–ü–∞–¥–µ–ª', icon: 'üéæ', color: '#3B82F6' },
  { id: 'tennis', name: '–¢–µ–Ω–Ω–∏—Å', icon: 'üéæ', color: '#00D632' },
  { id: 'badminton', name: '–ë–∞–¥–º–∏–Ω—Ç–æ–Ω', icon: 'üè∏', color: '#F59E0B' },
];

const CITIES = [
  { id: 'all', name: '–í—Å—è –†–æ—Å—Å–∏—è', lat: 55.7558, lng: 37.6173, radius: 10000 }, // 10000 –∫–º - –≤—Å—è —Å—Ç—Ä–∞–Ω–∞
  { id: 'moscow', name: '–ú–æ—Å–∫–≤–∞', lat: 55.7558, lng: 37.6173, radius: 50 }, // 50 –∫–º - –ú–æ—Å–∫–≤–∞ –∏ –æ–±–ª–∞—Å—Ç—å
  { id: 'spb', name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', lat: 59.9311, lng: 30.3609, radius: 40 }, // 40 –∫–º - –°–ü–± –∏ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏
  { id: 'kazan', name: '–ö–∞–∑–∞–Ω—å', lat: 55.8304, lng: 49.0661, radius: 30 }, // 30 –∫–º
  { id: 'ekb', name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', lat: 56.8389, lng: 60.6057, radius: 30 }, // 30 –∫–º
  { id: 'nn', name: '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', lat: 56.2965, lng: 43.9361, radius: 30 }, // 30 –∫–º
  { id: 'nsk', name: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', lat: 55.0084, lng: 82.9357, radius: 30 }, // 30 –∫–º
  { id: 'neftekamsk', name: '–ù–µ—Ñ—Ç–µ–∫–∞–º—Å–∫', lat: 56.0920, lng: 54.2481, radius: 30 }, // 30 –∫–º
];

function HomePage() {
  const navigate = useNavigate();
  const { city: cityParam, sport: sportParam } = useParams<{ city?: string; sport?: string }>();
  
  const [clubs, setClubs] = useState<Venue[]>([]);
  const [filteredClubs, setFilteredClubs] = useState<Venue[]>([]);
  const [loading, setLoading] = useState(true);
  const [selectedCity, setSelectedCity] = useState(cityParam || 'all');
  const [selectedSport, setSelectedSport] = useState(sportParam || 'all');
  const [searchQuery, setSearchQuery] = useState('');
  const [userLocation, setUserLocation] = useState<{ lat: number; lng: number } | null>(null);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (navigator.geolocation && !cityParam) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          setUserLocation({
            lat: position.coords.latitude,
            lng: position.coords.longitude,
          });
          // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–ª–∏–∂–∞–π—à–∏–π –≥–æ—Ä–æ–¥
          const nearestCity = findNearestCity(
            position.coords.latitude,
            position.coords.longitude
          );
          if (nearestCity && nearestCity.id !== 'all') {
            setSelectedCity(nearestCity.id);
          }
        },
        (error) => {
          // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º "–í—Å—è –†–æ—Å—Å–∏—è"
          if (!cityParam) {
            setSelectedCity('all');
          }
        }
      );
    } else if (!cityParam) {
      // –ï—Å–ª–∏ –Ω–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "–í—Å—è –†–æ—Å—Å–∏—è"
      setSelectedCity('all');
    }
  }, [cityParam]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—É–±–æ–≤
  useEffect(() => {
    const loadClubs = async () => {
      setLoading(true);
      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ venues (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä public, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å)
        const snapshot = await getDocs(collection(db, 'venues'));
        const venuesData = await Promise.all(
          snapshot.docs.map(async (doc) => {
            const venueData = {
              id: doc.id,
              ...doc.data()
            } as Venue;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—É–±–∞ —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞
            try {
              const courtsSnapshot = await getDocs(
                collection(db, 'venues', doc.id, 'courts')
              );
              
              // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞ –∏–∑ –∫–æ—Ä—Ç–æ–≤
              const sportTypes = new Set<string>();
              courtsSnapshot.docs.forEach(courtDoc => {
                const courtData = courtDoc.data();
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –ø–æ–ª—è: type (—Å—Ç–∞—Ä–æ–µ) –∏ sportType (–Ω–æ–≤–æ–µ)
                const sportType = courtData.sportType || courtData.type;
                if (sportType) {
                  // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
                  sportTypes.add(sportType.toLowerCase());
                }
              });
              
              // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–∞—Ö —Å–ø–æ—Ä—Ç–∞ –∏–∑ –∫–æ—Ä—Ç–æ–≤
              venueData.courtSportTypes = Array.from(sportTypes);
              venueData.hasCourts = courtsSnapshot.docs.length > 0;
            } catch (error) {
              console.error(`Error loading courts for venue ${doc.id}:`, error);
              venueData.courtSportTypes = [];
              venueData.hasCourts = false;
            }
            
            return venueData;
          })
        );

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
        if (userLocation) {
          venuesData.sort((a, b) => {
            const distA = calculateDistance(
              userLocation.lat,
              userLocation.lng,
              a.latitude || 0,
              a.longitude || 0
            );
            const distB = calculateDistance(
              userLocation.lat,
              userLocation.lng,
              b.latitude || 0,
              b.longitude || 0
            );
            return distA - distB;
          });
        }

        setClubs(venuesData);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—É–±–æ–≤:', error);
      } finally {
        setLoading(false);
      }
    };

    loadClubs();
  }, [userLocation]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–ª—É–±–æ–≤
  useEffect(() => {
    let filtered = [...clubs];

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞
    if (selectedSport && selectedSport !== 'all') {
      filtered = filtered.filter(venue => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞ –∏–∑ –∫–æ—Ä—Ç–æ–≤
        // –ö–ª—É–±—ã –±–µ–∑ –∫–æ—Ä—Ç–æ–≤ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å–ø–æ—Ä—Ç—É
        return venue.courtSportTypes?.includes(selectedSport);
      });
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      filtered = filtered.filter(venue => {
        const nameMatch = venue.name?.toLowerCase().includes(query);
        const addressMatch = venue.address?.toLowerCase().includes(query);
        const descMatch = venue.description?.toLowerCase().includes(query);
        return nameMatch || addressMatch || descMatch;
      });
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥–æ—Ä–æ–¥—É —á–µ—Ä–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    if (selectedCity && selectedCity !== 'all') {
      const city = CITIES.find(c => c.id === selectedCity);
      if (city) {
        filtered = filtered.filter(venue => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —É –∫–ª—É–±–∞
          if (!venue.latitude || !venue.longitude) {
            return false; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—É–±—ã –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≥–æ—Ä–æ–¥—É
          }
          
          // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–æ –∫–ª—É–±–∞
          const distance = calculateDistance(
            city.lat,
            city.lng,
            venue.latitude,
            venue.longitude
          );
          
          // –í–∫–ª—é—á–∞–µ–º –∫–ª—É–±, –µ—Å–ª–∏ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–¥–∏—É—Å–∞ –≥–æ—Ä–æ–¥–∞
          return distance <= city.radius;
        });
      }
    }

    setFilteredClubs(filtered);
  }, [clubs, selectedSport, searchQuery, selectedCity]);

  // URL –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    const city = selectedCity || 'all';
    const sport = selectedSport || 'all';
    
    if (city === 'all' && sport === 'all') {
      navigate('/');
    } else if (sport === 'all') {
      navigate(`/${city}`);
    } else if (city === 'all') {
      navigate(`/all/${sport}`);
    } else {
      navigate(`/${city}/${sport}`);
    }
  }, [selectedCity, selectedSport, navigate]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ meta —Ç–µ–≥–æ–≤ –¥–ª—è SEO
  useEffect(() => {
    const title = getPageTitle();
    const description = getMetaDescription();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º title
    document.title = `${title} - AllCourt`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º meta description
    let metaDescription = document.querySelector('meta[name="description"]');
    if (!metaDescription) {
      metaDescription = document.createElement('meta');
      metaDescription.setAttribute('name', 'description');
      document.head.appendChild(metaDescription);
    }
    metaDescription.setAttribute('content', description);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º OG tags
    let ogTitle = document.querySelector('meta[property="og:title"]');
    if (!ogTitle) {
      ogTitle = document.createElement('meta');
      ogTitle.setAttribute('property', 'og:title');
      document.head.appendChild(ogTitle);
    }
    ogTitle.setAttribute('content', `${title} - AllCourt`);
    
    let ogDescription = document.querySelector('meta[property="og:description"]');
    if (!ogDescription) {
      ogDescription = document.createElement('meta');
      ogDescription.setAttribute('property', 'og:description');
      document.head.appendChild(ogDescription);
    }
    ogDescription.setAttribute('content', description);
  }, [selectedCity, selectedSport]);

  const findNearestCity = (lat: number, lng: number) => {
    let minDistance = Infinity;
    let nearestCity = CITIES.find(c => c.id === 'moscow'); // default to Moscow

    CITIES.forEach(city => {
      if (city.id === 'all') return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º "–í—Å—è –†–æ—Å—Å–∏—è"
      
      const distance = calculateDistance(lat, lng, city.lat, city.lng);
      if (distance < minDistance) {
        minDistance = distance;
        nearestCity = city;
      }
    });

    return nearestCity;
  };

  const calculateDistance = (lat1: number, lng1: number, lat2: number, lng2: number) => {
    const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLng = (lng2 - lng1) * Math.PI / 180;
    const a = 
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
      Math.sin(dLng / 2) * Math.sin(dLng / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c;
  };

  const getPageTitle = () => {
    const city = CITIES.find(c => c.id === selectedCity);
    const sport = SPORTS.find(s => s.id === selectedSport);
    
    if (selectedCity === 'all') {
      if (selectedSport === 'all') {
        return '–ö–æ—Ä—Ç—ã —Ä—è–¥–æ–º —Å –≤–∞–º–∏';
      } else if (sport) {
        if (selectedSport === 'padel') return '–ü–∞–¥–µ–ª –∫–æ—Ä—Ç—ã —Ä—è–¥–æ–º —Å –≤–∞–º–∏';
        if (selectedSport === 'tennis') return '–¢–µ–Ω–Ω–∏—Å–Ω—ã–µ –∫–æ—Ä—Ç—ã —Ä—è–¥–æ–º —Å –≤–∞–º–∏';
        if (selectedSport === 'badminton') return '–ö–æ—Ä—Ç—ã –¥–ª—è –±–∞–¥–º–∏–Ω—Ç–æ–Ω–∞ —Ä—è–¥–æ–º —Å –≤–∞–º–∏';
      }
    } else if (city) {
      if (selectedSport === 'all') {
        return `–ö–æ—Ä—Ç—ã –≤ ${city.name === '–ú–æ—Å–∫–≤–∞' ? '–ú–æ—Å–∫–≤–µ' : 
                         city.name === '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥' ? '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ' :
                         city.name === '–ö–∞–∑–∞–Ω—å' ? '–ö–∞–∑–∞–Ω–∏' :
                         city.name === '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥' ? '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ' :
                         city.name === '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥' ? '–ù–∏–∂–Ω–µ–º –ù–æ–≤–≥–æ—Ä–æ–¥–µ' :
                         city.name === '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫' ? '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ' :
                         city.name}`;
      } else if (sport) {
        const cityInCase = city.name === '–ú–æ—Å–∫–≤–∞' ? '–ú–æ—Å–∫–≤–µ' : 
                          city.name === '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥' ? '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ' :
                          city.name === '–ö–∞–∑–∞–Ω—å' ? '–ö–∞–∑–∞–Ω–∏' :
                          city.name === '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥' ? '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ' :
                          city.name === '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥' ? '–ù–∏–∂–Ω–µ–º –ù–æ–≤–≥–æ—Ä–æ–¥–µ' :
                          city.name === '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫' ? '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ' :
                          city.name;
        
        if (selectedSport === 'padel') return `–ü–∞–¥–µ–ª –∫–æ—Ä—Ç—ã –≤ ${cityInCase}`;
        if (selectedSport === 'tennis') return `–¢–µ–Ω–Ω–∏—Å–Ω—ã–µ –∫–æ—Ä—Ç—ã –≤ ${cityInCase}`;
        if (selectedSport === 'badminton') return `–ö–æ—Ä—Ç—ã –¥–ª—è –±–∞–¥–º–∏–Ω—Ç–æ–Ω–∞ –≤ ${cityInCase}`;
      }
    }
    
    return '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∫–ª—É–±—ã';
  };

  const getMetaDescription = () => {
    const city = CITIES.find(c => c.id === selectedCity);
    const sport = SPORTS.find(s => s.id === selectedSport);
    
    if (selectedCity === 'all') {
      if (selectedSport === 'all') {
        return '–ù–∞–π–¥–∏—Ç–µ –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –∫–æ—Ä—Ç —Ä—è–¥–æ–º —Å –≤–∞–º–∏. –¢–µ–Ω–Ω–∏—Å, –ø–∞–¥–µ–ª, –±–∞–¥–º–∏–Ω—Ç–æ–Ω. –û–Ω–ª–∞–π–Ω –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ 24/7.';
      } else if (sport) {
        return `–ù–∞–π–¥–∏—Ç–µ –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ ${sport.name.toLowerCase()} –∫–æ—Ä—Ç —Ä—è–¥–æ–º —Å –≤–∞–º–∏. –û–Ω–ª–∞–π–Ω –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ 24/7.`;
      }
    } else if (city) {
      if (selectedSport === 'all') {
        return `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ç–æ–≤ –≤ ${city.name === '–ú–æ—Å–∫–≤–∞' ? '–ú–æ—Å–∫–≤–µ' : city.name}. –¢–µ–Ω–Ω–∏—Å, –ø–∞–¥–µ–ª, –±–∞–¥–º–∏–Ω—Ç–æ–Ω. –õ—É—á—à–∏–µ –∫–ª—É–±—ã –≥–æ—Ä–æ–¥–∞.`;
      } else if (sport) {
        return `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ${sport.name.toLowerCase()} –∫–æ—Ä—Ç–æ–≤ –≤ ${city.name === '–ú–æ—Å–∫–≤–∞' ? '–ú–æ—Å–∫–≤–µ' : city.name}. –õ—É—á—à–∏–µ –∫–ª—É–±—ã, –æ–Ω–ª–∞–π–Ω –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ 24/7.`;
      }
    }
    
    return '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –∫–æ—Ä—Ç–æ–≤ –æ–Ω–ª–∞–π–Ω. 500+ –∫–ª—É–±–æ–≤ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏.';
  };

  return (
    <div className="showcase-app">
      <Header 
        cities={CITIES}
        selectedCity={selectedCity}
        onCityChange={setSelectedCity}
        sports={SPORTS}
        selectedSport={selectedSport}
        onSportChange={setSelectedSport}
        onSearch={setSearchQuery}
        clubs={filteredClubs}
      />
      
      <main className="showcase-main">
        <ClubsList 
          clubs={filteredClubs}
          loading={loading}
          userLocation={userLocation}
          title={getPageTitle()}
        />
        
        <LandingSection />
      </main>
      
      <Footer />
    </div>
  );
}

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<HomePage />} />
        <Route path="/:city" element={<HomePage />} />
        <Route path="/:city/:sport" element={<HomePage />} />
        <Route path="/venue/:clubId" element={<ClubPage />} />
      </Routes>
    </Router>
  );
}

export default App;