import React, { useState } from 'react'
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  Alert,
  CircularProgress,
  LinearProgress,
  List,
  ListItem,
  ListItemText,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions
} from '@mui/material'
import { Upgrade, Check, Warning } from '@mui/icons-material'
import { usePermission } from '../../hooks/usePermission'
import { migrateSubscriptionPlans } from '../../utils/migrateSubscriptions'

export default function MigrationTools() {
  const { isSuperAdmin } = usePermission()
  const [migrating, setMigrating] = useState(false)
  const [migrationResult, setMigrationResult] = useState<any>(null)
  const [dialogOpen, setDialogOpen] = useState(false)

  if (!isSuperAdmin) {
    return (
      <Alert severity="error">
        –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
      </Alert>
    )
  }

  const handleMigrate = async () => {
    setDialogOpen(false)
    setMigrating(true)
    setMigrationResult(null)
    
    try {
      const result = await migrateSubscriptionPlans()
      setMigrationResult(result)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error)
      setMigrationResult({ 
        success: false, 
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' 
      })
    } finally {
      setMigrating(false)
    }
  }

  return (
    <Box>
      <Typography variant="h5" component="h2" gutterBottom>
        –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏
      </Typography>

      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
          </Typography>
          
          <Alert severity="info" sx={{ mb: 2 }}>
            –≠—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–∏—Ç —Å—Ç–∞—Ä—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤ –Ω–∞ –Ω–æ–≤—ã–µ:
            <List dense>
              <ListItem>
                <ListItemText primary="–°–¢–ê–†–¢ ‚Üí –ë–ê–ó–û–í–´–ô" />
              </ListItem>
              <ListItem>
                <ListItemText primary="–°–¢–ê–ù–î–ê–†–¢ ‚Üí CRM" />
              </ListItem>
            </List>
          </Alert>

          {migrationResult && (
            <Alert 
              severity={migrationResult.success ? 'success' : 'error'} 
              sx={{ mb: 2 }}
            >
              {migrationResult.success ? (
                <Box>
                  <Typography variant="subtitle2" gutterBottom>
                    –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!
                  </Typography>
                  <Typography variant="body2">
                    ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {migrationResult.updated} –ø–æ–¥–ø–∏—Å–æ–∫<br />
                    ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {migrationResult.skipped} –ø–æ–¥–ø–∏—Å–æ–∫<br />
                    üìù –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {migrationResult.total} –ø–æ–¥–ø–∏—Å–æ–∫
                  </Typography>
                </Box>
              ) : (
                <Box>
                  <Typography variant="subtitle2" gutterBottom>
                    –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
                  </Typography>
                  <Typography variant="body2">
                    {migrationResult.error}
                  </Typography>
                </Box>
              )}
            </Alert>
          )}

          {migrating ? (
            <Box sx={{ width: '100%', mt: 2 }}>
              <Typography variant="body2" color="text.secondary" gutterBottom>
                –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è...
              </Typography>
              <LinearProgress />
            </Box>
          ) : (
            <Button
              variant="contained"
              color="primary"
              startIcon={<Upgrade />}
              onClick={() => setDialogOpen(true)}
              disabled={migrationResult?.success}
            >
              –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é
            </Button>
          )}
        </CardContent>
      </Card>

      <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>
        <DialogTitle>
          <Box display="flex" alignItems="center" gap={1}>
            <Warning color="warning" />
            –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
          </Box>
        </DialogTitle>
        <DialogContent>
          <Typography variant="body1" paragraph>
            –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤?
          </Typography>
          <Typography variant="body2" color="text.secondary">
            –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –æ–±–Ω–æ–≤–∏—Ç –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ç–∞—Ä–∏—Ñ–æ–≤ 
            (–°–¢–ê–†–¢ –∏ –°–¢–ê–ù–î–ê–†–¢) –Ω–∞ –Ω–æ–≤—ã–µ (–ë–ê–ó–û–í–´–ô –∏ CRM).
          </Typography>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDialogOpen(false)}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button 
            variant="contained" 
            color="primary"
            onClick={handleMigrate}
            startIcon={<Check />}
          >
            –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  )
}