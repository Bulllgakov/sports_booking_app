import { collection, getDocs, updateDoc, doc, query, where } from 'firebase/firestore'
import { db } from '../services/firebase'

export async function migrateSubscriptionPlans() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Ç–∞—Ä–∏—Ñ–æ–≤...')
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
    const subscriptionsRef = collection(db, 'subscriptions')
    const subscriptionsSnapshot = await getDocs(subscriptionsRef)
    
    let updated = 0
    let skipped = 0
    
    for (const docSnapshot of subscriptionsSnapshot.docs) {
      const data = docSnapshot.data()
      let needsUpdate = false
      let newPlan = data.plan
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ –Ω–æ–≤—ã–µ
      if (data.plan === 'start') {
        newPlan = 'basic'
        needsUpdate = true
      } else if (data.plan === 'standard') {
        newPlan = 'crm'
        needsUpdate = true
      }
      
      if (needsUpdate) {
        await updateDoc(doc(db, 'subscriptions', docSnapshot.id), {
          plan: newPlan,
          updatedAt: new Date()
        })
        
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ${docSnapshot.id}: ${data.plan} ‚Üí ${newPlan}`)
        updated++
      } else {
        skipped++
      }
    }
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:`)
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updated} –ø–æ–¥–ø–∏—Å–æ–∫`)
    console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped} –ø–æ–¥–ø–∏—Å–æ–∫ (—É–∂–µ –∏–º–µ—é—Ç –Ω–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è)`)
    console.log(`üìù –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${subscriptionsSnapshot.size} –ø–æ–¥–ø–∏—Å–æ–∫`)
    
    return { success: true, updated, skipped, total: subscriptionsSnapshot.size }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error)
    return { success: false, error }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –æ–¥–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
export async function migrateSingleSubscription(venueId: string) {
  try {
    const subsQuery = query(
      collection(db, 'subscriptions'),
      where('venueId', '==', venueId),
      where('status', 'in', ['active', 'trial'])
    )
    const snapshot = await getDocs(subsQuery)
    
    if (!snapshot.empty) {
      const subDoc = snapshot.docs[0]
      const data = subDoc.data()
      
      if (data.plan === 'start' || data.plan === 'standard') {
        const newPlan = data.plan === 'start' ? 'basic' : 'crm'
        
        await updateDoc(doc(db, 'subscriptions', subDoc.id), {
          plan: newPlan,
          updatedAt: new Date()
        })
        
        console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –∫–ª—É–±–∞ ${venueId}: ${data.plan} ‚Üí ${newPlan}`)
        return true
      }
    }
    return false
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error)
    return false
  }
}