import { initializeApp } from 'firebase/app';
import { 
  getFirestore, 
  collection, 
  getDocs, 
  query, 
  where
} from 'firebase/firestore';

// Firebase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const firebaseConfig = {
  apiKey: "AIzaSyCPNy9b3FYNz5i_aiJcJ9BkvZKoQfQu-sA",
  authDomain: "sports-booking-app-1d7e5.firebaseapp.com",
  projectId: "sports-booking-app-1d7e5",
  storageBucket: "sports-booking-app-1d7e5.appspot.com",
  messagingSenderId: "648540980109",
  appId: "1:648540980109:web:f61c8fd716e0f76c3de0ea"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

async function checkStatuses() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π...\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const bookingsSnapshot = await getDocs(collection(db, 'bookings'));
    console.log(`–í—Å–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: ${bookingsSnapshot.size}\n`);

    const problematic = [];
    
    bookingsSnapshot.forEach(doc => {
      const booking = doc.data();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
      if (booking.status === 'confirmed' && booking.paymentStatus === 'awaiting_payment') {
        problematic.push({
          id: doc.id,
          status: booking.status,
          paymentStatus: booking.paymentStatus,
          customerName: booking.customerName,
          date: booking.date,
          courtName: booking.courtName
        });
      }
    });
    
    if (problematic.length > 0) {
      console.log(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${problematic.length} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º:\n`);
      console.log('Status = confirmed, –Ω–æ PaymentStatus = awaiting_payment:\n');
      
      problematic.forEach(b => {
        const dateStr = b.date?.toDate ? b.date.toDate().toISOString().split('T')[0] : b.date;
        console.log(`  ID: ${b.id}`);
        console.log(`    –ö–ª–∏–µ–Ω—Ç: ${b.customerName}`);
        console.log(`    –î–∞—Ç–∞: ${dateStr}`);
        console.log(`    –ö–æ—Ä—Ç: ${b.courtName}`);
        console.log(`    Status: ${b.status} | PaymentStatus: ${b.paymentStatus}`);
        console.log('');
      });
    } else {
      console.log('‚úÖ –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
      console.log('–í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã.\n');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–Ω—è—Ç–æ—Å—Ç—å —Å–ª–æ—Ç–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const todayStr = today.toISOString().split('T')[0];
    
    let todayCount = 0;
    let occupyingCount = 0;
    
    bookingsSnapshot.forEach(doc => {
      const booking = doc.data();
      const dateStr = booking.date?.toDate ? 
        booking.date.toDate().toISOString().split('T')[0] : 
        booking.date;
      
      if (dateStr === todayStr) {
        todayCount++;
        
        const status = booking.status || 'pending';
        const paymentStatus = booking.paymentStatus || 'awaiting_payment';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ª–æ–≥–∏–∫–µ –∏–∑ –¢–ó
        const occupiesSlot = 
          status !== 'cancelled' && 
          paymentStatus !== 'cancelled' && 
          paymentStatus !== 'refunded' &&
          paymentStatus !== 'error' &&
          (status === 'confirmed' || status === 'pending' ||
           paymentStatus === 'paid' || paymentStatus === 'online_payment' ||
           paymentStatus === 'awaiting_payment');
        
        if (occupiesSlot) {
          occupyingCount++;
        }
      }
    });
    
    console.log(`\nüìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (${todayStr}):`);
    console.log(`  –í—Å–µ–≥–æ: ${todayCount}`);
    console.log(`  –ó–∞–Ω–∏–º–∞—é—Ç —Å–ª–æ—Ç—ã: ${occupyingCount}`);
    console.log(`  –°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã: ${todayCount - occupyingCount}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
  
  process.exit(0);
}

checkStatuses();