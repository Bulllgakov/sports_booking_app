import { initializeApp } from 'firebase/app';
import { 
  getFirestore, 
  collection, 
  getDocs
} from 'firebase/firestore';

// Firebase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const firebaseConfig = {
  apiKey: "AIzaSyCPNy9b3FYNz5i_aiJcJ9BkvZKoQfQu-sA",
  authDomain: "sports-booking-app-1d7e5.firebaseapp.com",
  projectId: "sports-booking-app-1d7e5",
  storageBucket: "sports-booking-app-1d7e5.appspot.com",
  messagingSenderId: "648540980109",
  appId: "1:648540980109:web:f61c8fd716e0f76c3de0ea"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

async function checkCourtIds() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ID –∫–æ—Ä—Ç–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞—Ç –≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö –Ω–∞ 11 –∞–≤–≥—É—Å—Ç–∞...\n');

  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ—Ä—Ç—ã
    const courtsSnapshot = await getDocs(collection(db, 'courts'));
    const courts = {};
    
    courtsSnapshot.forEach(doc => {
      const court = doc.data();
      courts[doc.id] = court.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
      console.log(`–ö–æ—Ä—Ç: ${court.name} -> ID: ${doc.id}`);
    });
    
    console.log('\n' + '='.repeat(60) + '\n');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const bookingsSnapshot = await getDocs(collection(db, 'bookings'));
    
    const aug11Bookings = [];
    const targetDate = '2025-08-11';
    
    bookingsSnapshot.forEach(doc => {
      const booking = doc.data();
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      let dateStr = '';
      let dateFormat = 'unknown';
      
      if (typeof booking.date === 'string') {
        dateStr = booking.date;
        dateFormat = 'string';
      } else if (booking.date?.toDate) {
        dateStr = booking.date.toDate().toISOString().split('T')[0];
        dateFormat = 'timestamp';
      } else if (booking.date?.seconds) {
        dateStr = new Date(booking.date.seconds * 1000).toISOString().split('T')[0];
        dateFormat = 'seconds';
      }
      
      if (dateStr === targetDate) {
        aug11Bookings.push({
          id: doc.id,
          courtId: booking.courtId,
          courtName: booking.courtName,
          customerName: booking.customerName,
          startTime: booking.startTime || booking.time,
          endTime: booking.endTime,
          status: booking.status,
          paymentStatus: booking.paymentStatus,
          date: booking.date,
          dateFormat: dateFormat,
          dateStr: dateStr
        });
      }
    });
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–∞ 11 –∞–≤–≥—É—Å—Ç–∞: ${aug11Bookings.length}\n`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ courtId
    const byCourtId = {};
    const noCourtId = [];
    
    aug11Bookings.forEach(booking => {
      if (booking.courtId) {
        if (!byCourtId[booking.courtId]) {
          byCourtId[booking.courtId] = [];
        }
        byCourtId[booking.courtId].push(booking);
      } else {
        noCourtId.push(booking);
      }
    });
    
    // –í—ã–≤–æ–¥–∏–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ courtId
    Object.keys(byCourtId).forEach(courtId => {
      const bookings = byCourtId[courtId];
      const courtName = courts[courtId] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ—Ä—Ç';
      
      console.log(`\nüìç CourtId: ${courtId}`);
      console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${courtName}`);
      console.log(`   –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: ${bookings.length}`);
      console.log('   ' + '-'.repeat(40));
      
      bookings.forEach(b => {
        const status = b.status || '–Ω–µ—Ç';
        const paymentStatus = b.paymentStatus || '–Ω–µ—Ç';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–Ω–∏–º–∞–µ—Ç –ª–∏ —Å–ª–æ—Ç
        const occupiesSlot = 
          status !== 'cancelled' && 
          paymentStatus !== 'cancelled' && 
          paymentStatus !== 'refunded' &&
          paymentStatus !== 'error' &&
          (status === 'confirmed' || status === 'pending' ||
           paymentStatus === 'paid' || paymentStatus === 'online_payment' ||
           paymentStatus === 'awaiting_payment');
        
        const icon = occupiesSlot ? 'üî¥' : 'üü¢';
        
        console.log(`   ${icon} ${b.startTime}-${b.endTime} | ${b.customerName}`);
        console.log(`      Court Name –≤ –∑–∞–ø–∏—Å–∏: "${b.courtName}"`);
        console.log(`      –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: ${b.dateFormat}`);
        console.log(`      Status: ${status} | Payment: ${paymentStatus}`);
      });
    });
    
    // –í—ã–≤–æ–¥–∏–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ courtId
    if (noCourtId.length > 0) {
      console.log(`\n‚ö†Ô∏è  –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ë–ï–ó courtId: ${noCourtId.length}`);
      console.log('   ' + '-'.repeat(40));
      
      noCourtId.forEach(b => {
        const status = b.status || '–Ω–µ—Ç';
        const paymentStatus = b.paymentStatus || '–Ω–µ—Ç';
        
        const occupiesSlot = 
          status !== 'cancelled' && 
          paymentStatus !== 'cancelled' && 
          paymentStatus !== 'refunded' &&
          paymentStatus !== 'error' &&
          (status === 'confirmed' || status === 'pending' ||
           paymentStatus === 'paid' || paymentStatus === 'online_payment' ||
           paymentStatus === 'awaiting_payment');
        
        const icon = occupiesSlot ? 'üî¥' : 'üü¢';
        
        console.log(`   ${icon} ${b.startTime}-${b.endTime} | ${b.customerName}`);
        console.log(`      Court Name: "${b.courtName}"`);
        console.log(`      –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: ${b.dateFormat}`);
        console.log(`      Status: ${status} | Payment: ${paymentStatus}`);
      });
    }
    
    // –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞—Ç
    const dateFormats = {};
    aug11Bookings.forEach(b => {
      dateFormats[b.dateFormat] = (dateFormats[b.dateFormat] || 0) + 1;
    });
    
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞—Ç:');
    Object.entries(dateFormats).forEach(([format, count]) => {
      console.log(`   ${format}: ${count} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è date
    console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª—è date:');
    const uniqueDates = new Set();
    aug11Bookings.slice(0, 5).forEach(b => {
      const dateStr = JSON.stringify(b.date);
      if (!uniqueDates.has(dateStr)) {
        uniqueDates.add(dateStr);
        console.log(`   ${b.dateFormat}: ${dateStr}`);
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
  
  process.exit(0);
}

checkCourtIds();